// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_set_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFBsnModuleEepromEncoding;
import java.util.Set;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;
import java.util.EnumSet;
import java.util.Collections;


public class OFBsnModuleEepromEncodingSerializerVer15 {

    public final static byte BSN_MODULE_EEPROM_ENCODING_UNSPECIFIED_VAL = (byte) 0x0;
    public final static byte BSN_MODULE_EEPROM_ENCODING_8B_10B_VAL = (byte) 0x1;
    public final static byte BSN_MODULE_EEPROM_ENCODING_4B_5B_VAL = (byte) 0x2;
    public final static byte BSN_MODULE_EEPROM_ENCODING_NRZ_VAL = (byte) 0x3;
    public final static byte BSN_MODULE_EEPROM_ENCODING_MANCHESTER_VAL = (byte) 0x4;
    public final static byte BSN_MODULE_EEPROM_ENCODING_SONET_SCRAMBLED_VAL = (byte) 0x5;
    public final static byte BSN_MODULE_EEPROM_ENCODING_64B_66B_VAL = (byte) 0x6;

    public static Set<OFBsnModuleEepromEncoding> readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(bb.readByte());
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, Set<OFBsnModuleEepromEncoding> set) {
        bb.writeByte(toWireValue(set));
    }

    public static void putTo(Set<OFBsnModuleEepromEncoding> set, PrimitiveSink sink) {
        sink.putByte(toWireValue(set));
    }


    public static Set<OFBsnModuleEepromEncoding> ofWireValue(byte val) {
        EnumSet<OFBsnModuleEepromEncoding> set = EnumSet.noneOf(OFBsnModuleEepromEncoding.class);

        if((val & BSN_MODULE_EEPROM_ENCODING_UNSPECIFIED_VAL) != 0)
            set.add(OFBsnModuleEepromEncoding.BSN_MODULE_EEPROM_ENCODING_UNSPECIFIED);
        if((val & BSN_MODULE_EEPROM_ENCODING_8B_10B_VAL) != 0)
            set.add(OFBsnModuleEepromEncoding.BSN_MODULE_EEPROM_ENCODING_8B_10B);
        if((val & BSN_MODULE_EEPROM_ENCODING_4B_5B_VAL) != 0)
            set.add(OFBsnModuleEepromEncoding.BSN_MODULE_EEPROM_ENCODING_4B_5B);
        if((val & BSN_MODULE_EEPROM_ENCODING_NRZ_VAL) != 0)
            set.add(OFBsnModuleEepromEncoding.BSN_MODULE_EEPROM_ENCODING_NRZ);
        if((val & BSN_MODULE_EEPROM_ENCODING_MANCHESTER_VAL) != 0)
            set.add(OFBsnModuleEepromEncoding.BSN_MODULE_EEPROM_ENCODING_MANCHESTER);
        if((val & BSN_MODULE_EEPROM_ENCODING_SONET_SCRAMBLED_VAL) != 0)
            set.add(OFBsnModuleEepromEncoding.BSN_MODULE_EEPROM_ENCODING_SONET_SCRAMBLED);
        if((val & BSN_MODULE_EEPROM_ENCODING_64B_66B_VAL) != 0)
            set.add(OFBsnModuleEepromEncoding.BSN_MODULE_EEPROM_ENCODING_64B_66B);
        return Collections.unmodifiableSet(set);
    }

    public static byte toWireValue(Set<OFBsnModuleEepromEncoding> set) {
        byte wireValue = 0;

        for(OFBsnModuleEepromEncoding e: set) {
            switch(e) {
                case BSN_MODULE_EEPROM_ENCODING_UNSPECIFIED:
                    wireValue |= BSN_MODULE_EEPROM_ENCODING_UNSPECIFIED_VAL;
                    break;
                case BSN_MODULE_EEPROM_ENCODING_8B_10B:
                    wireValue |= BSN_MODULE_EEPROM_ENCODING_8B_10B_VAL;
                    break;
                case BSN_MODULE_EEPROM_ENCODING_4B_5B:
                    wireValue |= BSN_MODULE_EEPROM_ENCODING_4B_5B_VAL;
                    break;
                case BSN_MODULE_EEPROM_ENCODING_NRZ:
                    wireValue |= BSN_MODULE_EEPROM_ENCODING_NRZ_VAL;
                    break;
                case BSN_MODULE_EEPROM_ENCODING_MANCHESTER:
                    wireValue |= BSN_MODULE_EEPROM_ENCODING_MANCHESTER_VAL;
                    break;
                case BSN_MODULE_EEPROM_ENCODING_SONET_SCRAMBLED:
                    wireValue |= BSN_MODULE_EEPROM_ENCODING_SONET_SCRAMBLED_VAL;
                    break;
                case BSN_MODULE_EEPROM_ENCODING_64B_66B:
                    wireValue |= BSN_MODULE_EEPROM_ENCODING_64B_66B_VAL;
                    break;
                default:
                    throw new IllegalArgumentException("Illegal enum value for type OFBsnModuleEepromEncoding in version 1.5: " + e);
            }
        }
        return wireValue;
    }

}
