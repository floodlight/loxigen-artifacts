// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_class.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Set;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;
import com.google.common.hash.Funnel;

class OFBsnTlvDhcpv6OptFmtVer15 implements OFBsnTlvDhcpv6OptFmt {
    private static final Logger logger = LoggerFactory.getLogger(OFBsnTlvDhcpv6OptFmtVer15.class);
    // version: 1.5
    final static byte WIRE_VERSION = 6;
    final static int LENGTH = 6;


    // OF message fields
    private final OFBsnDhcpv6OptFmt fmt;
//

    // package private constructor - used by readers, builders, and factory
    OFBsnTlvDhcpv6OptFmtVer15(OFBsnDhcpv6OptFmt fmt) {
        if(fmt == null) {
            throw new NullPointerException("OFBsnTlvDhcpv6OptFmtVer15: property fmt cannot be null");
        }
        this.fmt = fmt;
    }

    // Accessors for OF message fields
    @Override
    public int getType() {
        return 0xe1;
    }

    @Override
    public OFBsnDhcpv6OptFmt getFmt() {
        return fmt;
    }

    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_15;
    }



    public OFBsnTlvDhcpv6OptFmt.Builder createBuilder() {
        return new BuilderWithParent(this);
    }

    static class BuilderWithParent implements OFBsnTlvDhcpv6OptFmt.Builder {
        final OFBsnTlvDhcpv6OptFmtVer15 parentMessage;

        // OF message fields
        private boolean fmtSet;
        private OFBsnDhcpv6OptFmt fmt;

        BuilderWithParent(OFBsnTlvDhcpv6OptFmtVer15 parentMessage) {
            this.parentMessage = parentMessage;
        }

    @Override
    public int getType() {
        return 0xe1;
    }

    @Override
    public OFBsnDhcpv6OptFmt getFmt() {
        return fmt;
    }

    @Override
    public OFBsnTlvDhcpv6OptFmt.Builder setFmt(OFBsnDhcpv6OptFmt fmt) {
        this.fmt = fmt;
        this.fmtSet = true;
        return this;
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_15;
    }



        @Override
        public OFBsnTlvDhcpv6OptFmt build() {
                OFBsnDhcpv6OptFmt fmt = this.fmtSet ? this.fmt : parentMessage.fmt;
                if(fmt == null)
                    throw new NullPointerException("Property fmt must not be null");

                //
                return new OFBsnTlvDhcpv6OptFmtVer15(
                    fmt
                );
        }

    }

    static class Builder implements OFBsnTlvDhcpv6OptFmt.Builder {
        // OF message fields
        private boolean fmtSet;
        private OFBsnDhcpv6OptFmt fmt;

    @Override
    public int getType() {
        return 0xe1;
    }

    @Override
    public OFBsnDhcpv6OptFmt getFmt() {
        return fmt;
    }

    @Override
    public OFBsnTlvDhcpv6OptFmt.Builder setFmt(OFBsnDhcpv6OptFmt fmt) {
        this.fmt = fmt;
        this.fmtSet = true;
        return this;
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_15;
    }

//
        @Override
        public OFBsnTlvDhcpv6OptFmt build() {
            if(!this.fmtSet)
                throw new IllegalStateException("Property fmt doesn't have default value -- must be set");
            if(fmt == null)
                throw new NullPointerException("Property fmt must not be null");


            return new OFBsnTlvDhcpv6OptFmtVer15(
                    fmt
                );
        }

    }


    final static Reader READER = new Reader();
    static class Reader implements OFMessageReader<OFBsnTlvDhcpv6OptFmt> {
        @Override
        public OFBsnTlvDhcpv6OptFmt readFrom(ByteBuf bb) throws OFParseError {
            int start = bb.readerIndex();
            // fixed value property type == 0xe1
            short type = bb.readShort();
            if(type != (short) 0xe1)
                throw new OFParseError("Wrong type: Expected=0xe1(0xe1), got="+type);
            int length = U16.f(bb.readShort());
            if(length != 6)
                throw new OFParseError("Wrong length: Expected=6(6), got="+length);
            if(bb.readableBytes() + (bb.readerIndex() - start) < length) {
                // Buffer does not have all data yet
                bb.readerIndex(start);
                return null;
            }
            if(logger.isTraceEnabled())
                logger.trace("readFrom - length={}", length);
            OFBsnDhcpv6OptFmt fmt = OFBsnDhcpv6OptFmtSerializerVer15.readFrom(bb);

            OFBsnTlvDhcpv6OptFmtVer15 bsnTlvDhcpv6OptFmtVer15 = new OFBsnTlvDhcpv6OptFmtVer15(
                    fmt
                    );
            if(logger.isTraceEnabled())
                logger.trace("readFrom - read={}", bsnTlvDhcpv6OptFmtVer15);
            return bsnTlvDhcpv6OptFmtVer15;
        }
    }

    public void putTo(PrimitiveSink sink) {
        FUNNEL.funnel(this, sink);
    }

    final static OFBsnTlvDhcpv6OptFmtVer15Funnel FUNNEL = new OFBsnTlvDhcpv6OptFmtVer15Funnel();
    static class OFBsnTlvDhcpv6OptFmtVer15Funnel implements Funnel<OFBsnTlvDhcpv6OptFmtVer15> {
        private static final long serialVersionUID = 1L;
        @Override
        public void funnel(OFBsnTlvDhcpv6OptFmtVer15 message, PrimitiveSink sink) {
            // fixed value property type = 0xe1
            sink.putShort((short) 0xe1);
            // fixed value property length = 6
            sink.putShort((short) 0x6);
            OFBsnDhcpv6OptFmtSerializerVer15.putTo(message.fmt, sink);
        }
    }


    public void writeTo(ByteBuf bb) {
        WRITER.write(bb, this);
    }

    final static Writer WRITER = new Writer();
    static class Writer implements OFMessageWriter<OFBsnTlvDhcpv6OptFmtVer15> {
        @Override
        public void write(ByteBuf bb, OFBsnTlvDhcpv6OptFmtVer15 message) {
            // fixed value property type = 0xe1
            bb.writeShort((short) 0xe1);
            // fixed value property length = 6
            bb.writeShort((short) 0x6);
            OFBsnDhcpv6OptFmtSerializerVer15.writeTo(bb, message.fmt);


        }
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder("OFBsnTlvDhcpv6OptFmtVer15(");
        b.append("fmt=").append(fmt);
        b.append(")");
        return b.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OFBsnTlvDhcpv6OptFmtVer15 other = (OFBsnTlvDhcpv6OptFmtVer15) obj;

        if (fmt == null) {
            if (other.fmt != null)
                return false;
        } else if (!fmt.equals(other.fmt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;

        result = prime * result + ((fmt == null) ? 0 : fmt.hashCode());
        return result;
    }

}
