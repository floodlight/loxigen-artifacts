// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_virtual_class.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver14;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import io.netty.buffer.ByteBuf;

abstract class OFAsyncConfigPropVer14 {
    // version: 1.4
    final static byte WIRE_VERSION = 5;
    final static int MINIMUM_LENGTH = 4;


    public final static OFAsyncConfigPropVer14.Reader READER = new Reader();

    static class Reader extends AbstractOFMessageReader<OFAsyncConfigProp> {
        @Override
        public OFAsyncConfigProp readFrom(OFMessageReaderContext context, ByteBuf bb) throws OFParseError {
            if(bb.readableBytes() < MINIMUM_LENGTH)
                return null;
            int start = bb.readerIndex();
            short type = bb.readShort();
            switch(type) {
               case (short) 0xffff:
                   bb.readerIndex(start);
                   // discriminator value 0xffff=0xffff for class OFAsyncConfigPropExperimenterMasterVer14
                   return OFAsyncConfigPropExperimenterMasterVer14.READER.readFrom(context, bb);
               case (short) 0xfffe:
                   bb.readerIndex(start);
                   // discriminator value 0xfffe=0xfffe for class OFAsyncConfigPropExperimenterSlaveVer14
                   return OFAsyncConfigPropExperimenterSlaveVer14.READER.readFrom(context, bb);
               case (short) 0x5:
                   bb.readerIndex(start);
                   // discriminator value 0x5=0x5 for class OFAsyncConfigPropFlowRemovedMasterVer14
                   return OFAsyncConfigPropFlowRemovedMasterVer14.READER.readFrom(context, bb);
               case (short) 0x4:
                   bb.readerIndex(start);
                   // discriminator value 0x4=0x4 for class OFAsyncConfigPropFlowRemovedSlaveVer14
                   return OFAsyncConfigPropFlowRemovedSlaveVer14.READER.readFrom(context, bb);
               case (short) 0x1:
                   bb.readerIndex(start);
                   // discriminator value 0x1=0x1 for class OFAsyncConfigPropPacketInMasterVer14
                   return OFAsyncConfigPropPacketInMasterVer14.READER.readFrom(context, bb);
               case (short) 0x0:
                   bb.readerIndex(start);
                   // discriminator value 0x0=0x0 for class OFAsyncConfigPropPacketInSlaveVer14
                   return OFAsyncConfigPropPacketInSlaveVer14.READER.readFrom(context, bb);
               case (short) 0x3:
                   bb.readerIndex(start);
                   // discriminator value 0x3=0x3 for class OFAsyncConfigPropPortStatusMasterVer14
                   return OFAsyncConfigPropPortStatusMasterVer14.READER.readFrom(context, bb);
               case (short) 0x2:
                   bb.readerIndex(start);
                   // discriminator value 0x2=0x2 for class OFAsyncConfigPropPortStatusSlaveVer14
                   return OFAsyncConfigPropPortStatusSlaveVer14.READER.readFrom(context, bb);
               case (short) 0xb:
                   bb.readerIndex(start);
                   // discriminator value 0xb=0xb for class OFAsyncConfigPropRequestforwardMasterVer14
                   return OFAsyncConfigPropRequestforwardMasterVer14.READER.readFrom(context, bb);
               case (short) 0xa:
                   bb.readerIndex(start);
                   // discriminator value 0xa=0xa for class OFAsyncConfigPropRequestforwardSlaveVer14
                   return OFAsyncConfigPropRequestforwardSlaveVer14.READER.readFrom(context, bb);
               case (short) 0x7:
                   bb.readerIndex(start);
                   // discriminator value 0x7=0x7 for class OFAsyncConfigPropRoleStatusMasterVer14
                   return OFAsyncConfigPropRoleStatusMasterVer14.READER.readFrom(context, bb);
               case (short) 0x6:
                   bb.readerIndex(start);
                   // discriminator value 0x6=0x6 for class OFAsyncConfigPropRoleStatusSlaveVer14
                   return OFAsyncConfigPropRoleStatusSlaveVer14.READER.readFrom(context, bb);
               case (short) 0x9:
                   bb.readerIndex(start);
                   // discriminator value 0x9=0x9 for class OFAsyncConfigPropTableStatusMasterVer14
                   return OFAsyncConfigPropTableStatusMasterVer14.READER.readFrom(context, bb);
               case (short) 0x8:
                   bb.readerIndex(start);
                   // discriminator value 0x8=0x8 for class OFAsyncConfigPropTableStatusSlaveVer14
                   return OFAsyncConfigPropTableStatusSlaveVer14.READER.readFrom(context, bb);
               default:
                   context.getUnparsedHandler().unparsedMessage(OFAsyncConfigPropVer14.class, "type", type);
            }
            int length = U16.f(bb.readShort());
            if(length < MINIMUM_LENGTH)
                throw new OFParseError("Wrong length: Expected to be >= " + MINIMUM_LENGTH + ", was: " + length);
            if( ( bb.readableBytes() + (bb.readerIndex() - start)) < length ) {
                // message not yet fully read
                bb.readerIndex(start);
                return null;
            }
            // will only reach here if the discriminator turns up nothing.
            bb.skipBytes(length - (bb.readerIndex() - start));
            return null;
        }
    }
}
