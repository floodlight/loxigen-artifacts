// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFBsnCcfFeature;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;

public class OFBsnCcfFeatureSerializerVer15 {

    public final static short BSN_CCF_FEATURE_NONE_VAL = (short) 0x0;
    public final static short BSN_CCF_FEATURE_ADD_PEER_ON_EMPTY_VAL = (short) 0x1;
    public final static short BSN_CCF_FEATURE_DROP_DUPLICATE_L3CPU_VAL = (short) 0x2;

    public static OFBsnCcfFeature readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(bb.readShort());
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, OFBsnCcfFeature e) {
        bb.writeShort(toWireValue(e));
    }

    public static void putTo(OFBsnCcfFeature e, PrimitiveSink sink) {
        sink.putShort(toWireValue(e));
    }

    public static OFBsnCcfFeature ofWireValue(short val) {
        switch(val) {
            case BSN_CCF_FEATURE_NONE_VAL:
                return OFBsnCcfFeature.BSN_CCF_FEATURE_NONE;
            case BSN_CCF_FEATURE_ADD_PEER_ON_EMPTY_VAL:
                return OFBsnCcfFeature.BSN_CCF_FEATURE_ADD_PEER_ON_EMPTY;
            case BSN_CCF_FEATURE_DROP_DUPLICATE_L3CPU_VAL:
                return OFBsnCcfFeature.BSN_CCF_FEATURE_DROP_DUPLICATE_L3CPU;
            default:
                throw new IllegalArgumentException("Illegal wire value for type OFBsnCcfFeature in version 1.5: " + val);
        }
    }


    public static short toWireValue(OFBsnCcfFeature e) {
        switch(e) {
            case BSN_CCF_FEATURE_NONE:
                return BSN_CCF_FEATURE_NONE_VAL;
            case BSN_CCF_FEATURE_ADD_PEER_ON_EMPTY:
                return BSN_CCF_FEATURE_ADD_PEER_ON_EMPTY_VAL;
            case BSN_CCF_FEATURE_DROP_DUPLICATE_L3CPU:
                return BSN_CCF_FEATURE_DROP_DUPLICATE_L3CPU_VAL;
            default:
                throw new IllegalArgumentException("Illegal enum value for type OFBsnCcfFeature in version 1.5: " + e);
        }
    }

}
