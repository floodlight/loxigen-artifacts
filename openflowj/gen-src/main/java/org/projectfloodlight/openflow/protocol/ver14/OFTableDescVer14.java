// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_class.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver14;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Set;
import com.google.common.collect.ImmutableSet;
import java.util.List;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;
import com.google.common.hash.Funnel;

class OFTableDescVer14 implements OFTableDesc {
    private static final Logger logger = LoggerFactory.getLogger(OFTableDescVer14.class);
    // version: 1.4
    final static byte WIRE_VERSION = 5;
    final static int LENGTH = 8;
    // maximum OF message length: 16 bit, unsigned
    final static int MAXIMUM_LENGTH = 0xFFFF;

        private final static TableId DEFAULT_TABLE_ID = TableId.ALL;
        private final static Set<OFTableConfig> DEFAULT_CONFIG = ImmutableSet.<OFTableConfig>of();

    // OF message fields
    private final TableId tableId;
    private final Set<OFTableConfig> config;
//
    // Immutable default instance
    final static OFTableDescVer14 DEFAULT = new OFTableDescVer14(
        DEFAULT_TABLE_ID, DEFAULT_CONFIG
    );

    // package private constructor - used by readers, builders, and factory
    OFTableDescVer14(TableId tableId, Set<OFTableConfig> config) {
        if(tableId == null) {
            throw new NullPointerException("OFTableDescVer14: property tableId cannot be null");
        }
        if(config == null) {
            throw new NullPointerException("OFTableDescVer14: property config cannot be null");
        }
        this.tableId = tableId;
        this.config = config;
    }

    // Accessors for OF message fields
    @Override
    public TableId getTableId() {
        return tableId;
    }

    @Override
    public Set<OFTableConfig> getConfig() {
        return config;
    }

    @Override
    public List<OFTableModProp> getProperties()throws UnsupportedOperationException {
        throw new UnsupportedOperationException("Property properties not supported in version 1.4");
    }

    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_14;
    }



    public OFTableDesc.Builder createBuilder() {
        return new BuilderWithParent(this);
    }

    static class BuilderWithParent implements OFTableDesc.Builder {
        final OFTableDescVer14 parentMessage;

        // OF message fields
        private boolean tableIdSet;
        private TableId tableId;
        private boolean configSet;
        private Set<OFTableConfig> config;

        BuilderWithParent(OFTableDescVer14 parentMessage) {
            this.parentMessage = parentMessage;
        }

    @Override
    public TableId getTableId() {
        return tableId;
    }

    @Override
    public OFTableDesc.Builder setTableId(TableId tableId) {
        this.tableId = tableId;
        this.tableIdSet = true;
        return this;
    }
    @Override
    public Set<OFTableConfig> getConfig() {
        return config;
    }

    @Override
    public OFTableDesc.Builder setConfig(Set<OFTableConfig> config) {
        this.config = config;
        this.configSet = true;
        return this;
    }
    @Override
    public List<OFTableModProp> getProperties()throws UnsupportedOperationException {
        throw new UnsupportedOperationException("Property properties not supported in version 1.4");
    }

    @Override
    public OFTableDesc.Builder setProperties(List<OFTableModProp> properties) throws UnsupportedOperationException {
            throw new UnsupportedOperationException("Property properties not supported in version 1.4");
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_14;
    }



        @Override
        public OFTableDesc build() {
                TableId tableId = this.tableIdSet ? this.tableId : parentMessage.tableId;
                if(tableId == null)
                    throw new NullPointerException("Property tableId must not be null");
                Set<OFTableConfig> config = this.configSet ? this.config : parentMessage.config;
                if(config == null)
                    throw new NullPointerException("Property config must not be null");

                //
                return new OFTableDescVer14(
                    tableId,
                    config
                );
        }

    }

    static class Builder implements OFTableDesc.Builder {
        // OF message fields
        private boolean tableIdSet;
        private TableId tableId;
        private boolean configSet;
        private Set<OFTableConfig> config;

    @Override
    public TableId getTableId() {
        return tableId;
    }

    @Override
    public OFTableDesc.Builder setTableId(TableId tableId) {
        this.tableId = tableId;
        this.tableIdSet = true;
        return this;
    }
    @Override
    public Set<OFTableConfig> getConfig() {
        return config;
    }

    @Override
    public OFTableDesc.Builder setConfig(Set<OFTableConfig> config) {
        this.config = config;
        this.configSet = true;
        return this;
    }
    @Override
    public List<OFTableModProp> getProperties()throws UnsupportedOperationException {
        throw new UnsupportedOperationException("Property properties not supported in version 1.4");
    }

    @Override
    public OFTableDesc.Builder setProperties(List<OFTableModProp> properties) throws UnsupportedOperationException {
            throw new UnsupportedOperationException("Property properties not supported in version 1.4");
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_14;
    }

//
        @Override
        public OFTableDesc build() {
            TableId tableId = this.tableIdSet ? this.tableId : DEFAULT_TABLE_ID;
            if(tableId == null)
                throw new NullPointerException("Property tableId must not be null");
            Set<OFTableConfig> config = this.configSet ? this.config : DEFAULT_CONFIG;
            if(config == null)
                throw new NullPointerException("Property config must not be null");


            return new OFTableDescVer14(
                    tableId,
                    config
                );
        }

    }


    final static Reader READER = new Reader();
    static class Reader implements OFMessageReader<OFTableDesc> {
        @Override
        public OFTableDesc readFrom(ByteBuf bb) throws OFParseError {
            int start = bb.readerIndex();
            int length = U16.f(bb.readShort());
            if(length != 8)
                throw new OFParseError("Wrong length: Expected=8(8), got="+length);
            if(bb.readableBytes() + (bb.readerIndex() - start) < length) {
                // Buffer does not have all data yet
                bb.readerIndex(start);
                return null;
            }
            if(logger.isTraceEnabled())
                logger.trace("readFrom - length={}", length);
            TableId tableId = TableId.readByte(bb);
            // pad: 1 bytes
            bb.skipBytes(1);
            Set<OFTableConfig> config = OFTableConfigSerializerVer14.readFrom(bb);

            OFTableDescVer14 tableDescVer14 = new OFTableDescVer14(
                    tableId,
                      config
                    );
            if(logger.isTraceEnabled())
                logger.trace("readFrom - read={}", tableDescVer14);
            return tableDescVer14;
        }
    }

    public void putTo(PrimitiveSink sink) {
        FUNNEL.funnel(this, sink);
    }

    final static OFTableDescVer14Funnel FUNNEL = new OFTableDescVer14Funnel();
    static class OFTableDescVer14Funnel implements Funnel<OFTableDescVer14> {
        private static final long serialVersionUID = 1L;
        @Override
        public void funnel(OFTableDescVer14 message, PrimitiveSink sink) {
            // fixed value property length = 8
            sink.putShort((short) 0x8);
            message.tableId.putTo(sink);
            // skip pad (1 bytes)
            OFTableConfigSerializerVer14.putTo(message.config, sink);
        }
    }


    public void writeTo(ByteBuf bb) {
        WRITER.write(bb, this);
    }

    final static Writer WRITER = new Writer();
    static class Writer implements OFMessageWriter<OFTableDescVer14> {
        @Override
        public void write(ByteBuf bb, OFTableDescVer14 message) {
            // fixed value property length = 8
            bb.writeShort((short) 0x8);
            message.tableId.writeByte(bb);
            // pad: 1 bytes
            bb.writeZero(1);
            OFTableConfigSerializerVer14.writeTo(bb, message.config);


        }
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder("OFTableDescVer14(");
        b.append("tableId=").append(tableId);
        b.append(", ");
        b.append("config=").append(config);
        b.append(")");
        return b.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OFTableDescVer14 other = (OFTableDescVer14) obj;

        if (tableId == null) {
            if (other.tableId != null)
                return false;
        } else if (!tableId.equals(other.tableId))
            return false;
        if (config == null) {
            if (other.config != null)
                return false;
        } else if (!config.equals(other.config))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;

        result = prime * result + ((tableId == null) ? 0 : tableId.hashCode());
        result = prime * result + ((config == null) ? 0 : config.hashCode());
        return result;
    }

}
