// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver13;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFBsnFlowClassifier;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;

public class OFBsnFlowClassifierSerializerVer13 {

    public final static short BSN_FLOW_CLASSIFIER_NONE_VAL = (short) 0x0;
    public final static short BSN_FLOW_CLASSIFIER_L2BC_VAL = (short) 0x1;
    public final static short BSN_FLOW_CLASSIFIER_L2UC_VAL = (short) 0x2;
    public final static short BSN_FLOW_CLASSIFIER_L2UNKNOWN_VAL = (short) 0x3;
    public final static short BSN_FLOW_CLASSIFIER_L2MCKNOWN_VAL = (short) 0x4;
    public final static short BSN_FLOW_CLASSIFIER_L2MCUNKNOWN_VAL = (short) 0x5;
    public final static short BSN_FLOW_CLASSIFIER_L3MCUNKNOWN_VAL = (short) 0x6;
    public final static short BSN_FLOW_CLASSIFIER_L3MCKNOWN_VAL = (short) 0x7;
    public final static short BSN_FLOW_CLASSIFIER_L3UCKNOWN_VAL = (short) 0x8;
    public final static short BSN_FLOW_CLASSIFIER_L3UCUNKNOWN_VAL = (short) 0x9;

    public static OFBsnFlowClassifier readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(bb.readShort());
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, OFBsnFlowClassifier e) {
        bb.writeShort(toWireValue(e));
    }

    public static void putTo(OFBsnFlowClassifier e, PrimitiveSink sink) {
        sink.putShort(toWireValue(e));
    }

    public static OFBsnFlowClassifier ofWireValue(short val) {
        switch(val) {
            case BSN_FLOW_CLASSIFIER_NONE_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_NONE;
            case BSN_FLOW_CLASSIFIER_L2BC_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_L2BC;
            case BSN_FLOW_CLASSIFIER_L2UC_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_L2UC;
            case BSN_FLOW_CLASSIFIER_L2UNKNOWN_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_L2UNKNOWN;
            case BSN_FLOW_CLASSIFIER_L2MCKNOWN_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_L2MCKNOWN;
            case BSN_FLOW_CLASSIFIER_L2MCUNKNOWN_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_L2MCUNKNOWN;
            case BSN_FLOW_CLASSIFIER_L3MCUNKNOWN_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_L3MCUNKNOWN;
            case BSN_FLOW_CLASSIFIER_L3MCKNOWN_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_L3MCKNOWN;
            case BSN_FLOW_CLASSIFIER_L3UCKNOWN_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_L3UCKNOWN;
            case BSN_FLOW_CLASSIFIER_L3UCUNKNOWN_VAL:
                return OFBsnFlowClassifier.BSN_FLOW_CLASSIFIER_L3UCUNKNOWN;
            default:
                throw new IllegalArgumentException("Illegal wire value for type OFBsnFlowClassifier in version 1.3: " + val);
        }
    }


    public static short toWireValue(OFBsnFlowClassifier e) {
        switch(e) {
            case BSN_FLOW_CLASSIFIER_NONE:
                return BSN_FLOW_CLASSIFIER_NONE_VAL;
            case BSN_FLOW_CLASSIFIER_L2BC:
                return BSN_FLOW_CLASSIFIER_L2BC_VAL;
            case BSN_FLOW_CLASSIFIER_L2UC:
                return BSN_FLOW_CLASSIFIER_L2UC_VAL;
            case BSN_FLOW_CLASSIFIER_L2UNKNOWN:
                return BSN_FLOW_CLASSIFIER_L2UNKNOWN_VAL;
            case BSN_FLOW_CLASSIFIER_L2MCKNOWN:
                return BSN_FLOW_CLASSIFIER_L2MCKNOWN_VAL;
            case BSN_FLOW_CLASSIFIER_L2MCUNKNOWN:
                return BSN_FLOW_CLASSIFIER_L2MCUNKNOWN_VAL;
            case BSN_FLOW_CLASSIFIER_L3MCUNKNOWN:
                return BSN_FLOW_CLASSIFIER_L3MCUNKNOWN_VAL;
            case BSN_FLOW_CLASSIFIER_L3MCKNOWN:
                return BSN_FLOW_CLASSIFIER_L3MCKNOWN_VAL;
            case BSN_FLOW_CLASSIFIER_L3UCKNOWN:
                return BSN_FLOW_CLASSIFIER_L3UCKNOWN_VAL;
            case BSN_FLOW_CLASSIFIER_L3UCUNKNOWN:
                return BSN_FLOW_CLASSIFIER_L3UCUNKNOWN_VAL;
            default:
                throw new IllegalArgumentException("Illegal enum value for type OFBsnFlowClassifier in version 1.3: " + e);
        }
    }

}
