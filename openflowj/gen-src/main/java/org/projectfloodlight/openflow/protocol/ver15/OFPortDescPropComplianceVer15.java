// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_class.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Set;
import com.google.common.collect.ImmutableSet;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;
import com.google.common.hash.Funnel;

class OFPortDescPropComplianceVer15 implements OFPortDescPropCompliance {
    private static final Logger logger = LoggerFactory.getLogger(OFPortDescPropComplianceVer15.class);
    // version: 1.5
    final static byte WIRE_VERSION = 6;
    final static int LENGTH = 7;

        private final static Set<OFBsnModuleEepromCmplnceType> DEFAULT_CMPLNCE_TYPE = ImmutableSet.<OFBsnModuleEepromCmplnceType>of();
        private final static Set<OFBsnModuleEepromCuCmplnce> DEFAULT_CU_CMPLNCE = ImmutableSet.<OFBsnModuleEepromCuCmplnce>of();

    // OF message fields
    private final Set<OFBsnModuleEepromCmplnceType> cmplnceType;
    private final Set<OFBsnModuleEepromCuCmplnce> cuCmplnce;
    private final OFBsnUnit wavelength;
//

    // package private constructor - used by readers, builders, and factory
    OFPortDescPropComplianceVer15(Set<OFBsnModuleEepromCmplnceType> cmplnceType, Set<OFBsnModuleEepromCuCmplnce> cuCmplnce, OFBsnUnit wavelength) {
        if(cmplnceType == null) {
            throw new NullPointerException("OFPortDescPropComplianceVer15: property cmplnceType cannot be null");
        }
        if(cuCmplnce == null) {
            throw new NullPointerException("OFPortDescPropComplianceVer15: property cuCmplnce cannot be null");
        }
        if(wavelength == null) {
            throw new NullPointerException("OFPortDescPropComplianceVer15: property wavelength cannot be null");
        }
        this.cmplnceType = cmplnceType;
        this.cuCmplnce = cuCmplnce;
        this.wavelength = wavelength;
    }

    // Accessors for OF message fields
    @Override
    public Set<OFBsnModuleEepromCmplnceType> getCmplnceType() {
        return cmplnceType;
    }

    @Override
    public Set<OFBsnModuleEepromCuCmplnce> getCuCmplnce() {
        return cuCmplnce;
    }

    @Override
    public OFBsnUnit getWavelength() {
        return wavelength;
    }

    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_15;
    }



    public OFPortDescPropCompliance.Builder createBuilder() {
        return new BuilderWithParent(this);
    }

    static class BuilderWithParent implements OFPortDescPropCompliance.Builder {
        final OFPortDescPropComplianceVer15 parentMessage;

        // OF message fields
        private boolean cmplnceTypeSet;
        private Set<OFBsnModuleEepromCmplnceType> cmplnceType;
        private boolean cuCmplnceSet;
        private Set<OFBsnModuleEepromCuCmplnce> cuCmplnce;
        private boolean wavelengthSet;
        private OFBsnUnit wavelength;

        BuilderWithParent(OFPortDescPropComplianceVer15 parentMessage) {
            this.parentMessage = parentMessage;
        }

    @Override
    public Set<OFBsnModuleEepromCmplnceType> getCmplnceType() {
        return cmplnceType;
    }

    @Override
    public OFPortDescPropCompliance.Builder setCmplnceType(Set<OFBsnModuleEepromCmplnceType> cmplnceType) {
        this.cmplnceType = cmplnceType;
        this.cmplnceTypeSet = true;
        return this;
    }
    @Override
    public Set<OFBsnModuleEepromCuCmplnce> getCuCmplnce() {
        return cuCmplnce;
    }

    @Override
    public OFPortDescPropCompliance.Builder setCuCmplnce(Set<OFBsnModuleEepromCuCmplnce> cuCmplnce) {
        this.cuCmplnce = cuCmplnce;
        this.cuCmplnceSet = true;
        return this;
    }
    @Override
    public OFBsnUnit getWavelength() {
        return wavelength;
    }

    @Override
    public OFPortDescPropCompliance.Builder setWavelength(OFBsnUnit wavelength) {
        this.wavelength = wavelength;
        this.wavelengthSet = true;
        return this;
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_15;
    }



        @Override
        public OFPortDescPropCompliance build() {
                Set<OFBsnModuleEepromCmplnceType> cmplnceType = this.cmplnceTypeSet ? this.cmplnceType : parentMessage.cmplnceType;
                if(cmplnceType == null)
                    throw new NullPointerException("Property cmplnceType must not be null");
                Set<OFBsnModuleEepromCuCmplnce> cuCmplnce = this.cuCmplnceSet ? this.cuCmplnce : parentMessage.cuCmplnce;
                if(cuCmplnce == null)
                    throw new NullPointerException("Property cuCmplnce must not be null");
                OFBsnUnit wavelength = this.wavelengthSet ? this.wavelength : parentMessage.wavelength;
                if(wavelength == null)
                    throw new NullPointerException("Property wavelength must not be null");

                //
                return new OFPortDescPropComplianceVer15(
                    cmplnceType,
                    cuCmplnce,
                    wavelength
                );
        }

    }

    static class Builder implements OFPortDescPropCompliance.Builder {
        // OF message fields
        private boolean cmplnceTypeSet;
        private Set<OFBsnModuleEepromCmplnceType> cmplnceType;
        private boolean cuCmplnceSet;
        private Set<OFBsnModuleEepromCuCmplnce> cuCmplnce;
        private boolean wavelengthSet;
        private OFBsnUnit wavelength;

    @Override
    public Set<OFBsnModuleEepromCmplnceType> getCmplnceType() {
        return cmplnceType;
    }

    @Override
    public OFPortDescPropCompliance.Builder setCmplnceType(Set<OFBsnModuleEepromCmplnceType> cmplnceType) {
        this.cmplnceType = cmplnceType;
        this.cmplnceTypeSet = true;
        return this;
    }
    @Override
    public Set<OFBsnModuleEepromCuCmplnce> getCuCmplnce() {
        return cuCmplnce;
    }

    @Override
    public OFPortDescPropCompliance.Builder setCuCmplnce(Set<OFBsnModuleEepromCuCmplnce> cuCmplnce) {
        this.cuCmplnce = cuCmplnce;
        this.cuCmplnceSet = true;
        return this;
    }
    @Override
    public OFBsnUnit getWavelength() {
        return wavelength;
    }

    @Override
    public OFPortDescPropCompliance.Builder setWavelength(OFBsnUnit wavelength) {
        this.wavelength = wavelength;
        this.wavelengthSet = true;
        return this;
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_15;
    }

//
        @Override
        public OFPortDescPropCompliance build() {
            Set<OFBsnModuleEepromCmplnceType> cmplnceType = this.cmplnceTypeSet ? this.cmplnceType : DEFAULT_CMPLNCE_TYPE;
            if(cmplnceType == null)
                throw new NullPointerException("Property cmplnceType must not be null");
            Set<OFBsnModuleEepromCuCmplnce> cuCmplnce = this.cuCmplnceSet ? this.cuCmplnce : DEFAULT_CU_CMPLNCE;
            if(cuCmplnce == null)
                throw new NullPointerException("Property cuCmplnce must not be null");
            if(!this.wavelengthSet)
                throw new IllegalStateException("Property wavelength doesn't have default value -- must be set");
            if(wavelength == null)
                throw new NullPointerException("Property wavelength must not be null");


            return new OFPortDescPropComplianceVer15(
                    cmplnceType,
                    cuCmplnce,
                    wavelength
                );
        }

    }


    final static Reader READER = new Reader();
    static class Reader implements OFMessageReader<OFPortDescPropCompliance> {
        @Override
        public OFPortDescPropCompliance readFrom(ByteBuf bb) throws OFParseError {
            Set<OFBsnModuleEepromCmplnceType> cmplnceType = OFBsnModuleEepromCmplnceTypeSerializerVer15.readFrom(bb);
            Set<OFBsnModuleEepromCuCmplnce> cuCmplnce = OFBsnModuleEepromCuCmplnceSerializerVer15.readFrom(bb);
            OFBsnUnit wavelength = OFBsnUnitVer15.READER.readFrom(bb);

            OFPortDescPropComplianceVer15 portDescPropComplianceVer15 = new OFPortDescPropComplianceVer15(
                    cmplnceType,
                      cuCmplnce,
                      wavelength
                    );
            if(logger.isTraceEnabled())
                logger.trace("readFrom - read={}", portDescPropComplianceVer15);
            return portDescPropComplianceVer15;
        }
    }

    public void putTo(PrimitiveSink sink) {
        FUNNEL.funnel(this, sink);
    }

    final static OFPortDescPropComplianceVer15Funnel FUNNEL = new OFPortDescPropComplianceVer15Funnel();
    static class OFPortDescPropComplianceVer15Funnel implements Funnel<OFPortDescPropComplianceVer15> {
        private static final long serialVersionUID = 1L;
        @Override
        public void funnel(OFPortDescPropComplianceVer15 message, PrimitiveSink sink) {
            OFBsnModuleEepromCmplnceTypeSerializerVer15.putTo(message.cmplnceType, sink);
            OFBsnModuleEepromCuCmplnceSerializerVer15.putTo(message.cuCmplnce, sink);
            message.wavelength.putTo(sink);
        }
    }


    public void writeTo(ByteBuf bb) {
        WRITER.write(bb, this);
    }

    final static Writer WRITER = new Writer();
    static class Writer implements OFMessageWriter<OFPortDescPropComplianceVer15> {
        @Override
        public void write(ByteBuf bb, OFPortDescPropComplianceVer15 message) {
            OFBsnModuleEepromCmplnceTypeSerializerVer15.writeTo(bb, message.cmplnceType);
            OFBsnModuleEepromCuCmplnceSerializerVer15.writeTo(bb, message.cuCmplnce);
            message.wavelength.writeTo(bb);


        }
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder("OFPortDescPropComplianceVer15(");
        b.append("cmplnceType=").append(cmplnceType);
        b.append(", ");
        b.append("cuCmplnce=").append(cuCmplnce);
        b.append(", ");
        b.append("wavelength=").append(wavelength);
        b.append(")");
        return b.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OFPortDescPropComplianceVer15 other = (OFPortDescPropComplianceVer15) obj;

        if (cmplnceType == null) {
            if (other.cmplnceType != null)
                return false;
        } else if (!cmplnceType.equals(other.cmplnceType))
            return false;
        if (cuCmplnce == null) {
            if (other.cuCmplnce != null)
                return false;
        } else if (!cuCmplnce.equals(other.cuCmplnce))
            return false;
        if (wavelength == null) {
            if (other.wavelength != null)
                return false;
        } else if (!wavelength.equals(other.wavelength))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;

        result = prime * result + ((cmplnceType == null) ? 0 : cmplnceType.hashCode());
        result = prime * result + ((cuCmplnce == null) ? 0 : cuCmplnce.hashCode());
        result = prime * result + ((wavelength == null) ? 0 : wavelength.hashCode());
        return result;
    }

}
