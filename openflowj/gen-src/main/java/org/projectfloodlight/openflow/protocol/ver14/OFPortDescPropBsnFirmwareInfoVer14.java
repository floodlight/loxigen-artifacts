// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_class.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver14;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Set;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;
import com.google.common.hash.Funnel;
import java.util.Arrays;

class OFPortDescPropBsnFirmwareInfoVer14 implements OFPortDescPropBsnFirmwareInfo {
    private static final Logger logger = LoggerFactory.getLogger(OFPortDescPropBsnFirmwareInfoVer14.class);
    // version: 1.4
    final static byte WIRE_VERSION = 5;
    final static int MINIMUM_LENGTH = 12;

        private final static byte[] DEFAULT_FIRMWARE = new byte[0];

    // OF message fields
    private final byte[] firmware;
//
    // Immutable default instance
    final static OFPortDescPropBsnFirmwareInfoVer14 DEFAULT = new OFPortDescPropBsnFirmwareInfoVer14(
        DEFAULT_FIRMWARE
    );

    // package private constructor - used by readers, builders, and factory
    OFPortDescPropBsnFirmwareInfoVer14(byte[] firmware) {
        if(firmware == null) {
            throw new NullPointerException("OFPortDescPropBsnFirmwareInfoVer14: property firmware cannot be null");
        }
        this.firmware = firmware;
    }

    // Accessors for OF message fields
    @Override
    public int getType() {
        return 0xffff;
    }

    @Override
    public long getExperimenter() {
        return 0x5c16c7L;
    }

    @Override
    public long getExpType() {
        return 0x8L;
    }

    @Override
    public byte[] getFirmware() {
        return firmware;
    }

    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_14;
    }



    public OFPortDescPropBsnFirmwareInfo.Builder createBuilder() {
        return new BuilderWithParent(this);
    }

    static class BuilderWithParent implements OFPortDescPropBsnFirmwareInfo.Builder {
        final OFPortDescPropBsnFirmwareInfoVer14 parentMessage;

        // OF message fields
        private boolean firmwareSet;
        private byte[] firmware;

        BuilderWithParent(OFPortDescPropBsnFirmwareInfoVer14 parentMessage) {
            this.parentMessage = parentMessage;
        }

    @Override
    public int getType() {
        return 0xffff;
    }

    @Override
    public long getExperimenter() {
        return 0x5c16c7L;
    }

    @Override
    public long getExpType() {
        return 0x8L;
    }

    @Override
    public OFPortDescPropBsnFirmwareInfo.Builder setExpType(long expType) {
            throw new UnsupportedOperationException("Property expType is not writeable");
    }
    @Override
    public byte[] getFirmware() {
        return firmware;
    }

    @Override
    public OFPortDescPropBsnFirmwareInfo.Builder setFirmware(byte[] firmware) {
        this.firmware = firmware;
        this.firmwareSet = true;
        return this;
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_14;
    }



        @Override
        public OFPortDescPropBsnFirmwareInfo build() {
                byte[] firmware = this.firmwareSet ? this.firmware : parentMessage.firmware;
                if(firmware == null)
                    throw new NullPointerException("Property firmware must not be null");

                //
                return new OFPortDescPropBsnFirmwareInfoVer14(
                    firmware
                );
        }

    }

    static class Builder implements OFPortDescPropBsnFirmwareInfo.Builder {
        // OF message fields
        private boolean firmwareSet;
        private byte[] firmware;

    @Override
    public int getType() {
        return 0xffff;
    }

    @Override
    public long getExperimenter() {
        return 0x5c16c7L;
    }

    @Override
    public long getExpType() {
        return 0x8L;
    }

    @Override
    public OFPortDescPropBsnFirmwareInfo.Builder setExpType(long expType) {
            throw new UnsupportedOperationException("Property expType is not writeable");
    }
    @Override
    public byte[] getFirmware() {
        return firmware;
    }

    @Override
    public OFPortDescPropBsnFirmwareInfo.Builder setFirmware(byte[] firmware) {
        this.firmware = firmware;
        this.firmwareSet = true;
        return this;
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_14;
    }

//
        @Override
        public OFPortDescPropBsnFirmwareInfo build() {
            byte[] firmware = this.firmwareSet ? this.firmware : DEFAULT_FIRMWARE;
            if(firmware == null)
                throw new NullPointerException("Property firmware must not be null");


            return new OFPortDescPropBsnFirmwareInfoVer14(
                    firmware
                );
        }

    }


    final static Reader READER = new Reader();
    static class Reader implements OFMessageReader<OFPortDescPropBsnFirmwareInfo> {
        @Override
        public OFPortDescPropBsnFirmwareInfo readFrom(ByteBuf bb) throws OFParseError {
            int start = bb.readerIndex();
            // fixed value property type == 0xffff
            short type = bb.readShort();
            if(type != (short) 0xffff)
                throw new OFParseError("Wrong type: Expected=0xffff(0xffff), got="+type);
            int length = U16.f(bb.readShort());
            if(length < MINIMUM_LENGTH)
                throw new OFParseError("Wrong length: Expected to be >= " + MINIMUM_LENGTH + ", was: " + length);
            if(bb.readableBytes() + (bb.readerIndex() - start) < length) {
                // Buffer does not have all data yet
                bb.readerIndex(start);
                return null;
            }
            if(logger.isTraceEnabled())
                logger.trace("readFrom - length={}", length);
            // fixed value property experimenter == 0x5c16c7L
            int experimenter = bb.readInt();
            if(experimenter != 0x5c16c7)
                throw new OFParseError("Wrong experimenter: Expected=0x5c16c7L(0x5c16c7L), got="+experimenter);
            // fixed value property expType == 0x8L
            int expType = bb.readInt();
            if(expType != 0x8)
                throw new OFParseError("Wrong expType: Expected=0x8L(0x8L), got="+expType);
            byte[] firmware = ChannelUtils.readBytes(bb, length - (bb.readerIndex() - start));

            OFPortDescPropBsnFirmwareInfoVer14 portDescPropBsnFirmwareInfoVer14 = new OFPortDescPropBsnFirmwareInfoVer14(
                    firmware
                    );
            if(logger.isTraceEnabled())
                logger.trace("readFrom - read={}", portDescPropBsnFirmwareInfoVer14);
            return portDescPropBsnFirmwareInfoVer14;
        }
    }

    public void putTo(PrimitiveSink sink) {
        FUNNEL.funnel(this, sink);
    }

    final static OFPortDescPropBsnFirmwareInfoVer14Funnel FUNNEL = new OFPortDescPropBsnFirmwareInfoVer14Funnel();
    static class OFPortDescPropBsnFirmwareInfoVer14Funnel implements Funnel<OFPortDescPropBsnFirmwareInfoVer14> {
        private static final long serialVersionUID = 1L;
        @Override
        public void funnel(OFPortDescPropBsnFirmwareInfoVer14 message, PrimitiveSink sink) {
            // fixed value property type = 0xffff
            sink.putShort((short) 0xffff);
            // FIXME: skip funnel of length
            // fixed value property experimenter = 0x5c16c7L
            sink.putInt(0x5c16c7);
            // fixed value property expType = 0x8L
            sink.putInt(0x8);
            sink.putBytes(message.firmware);
        }
    }


    public void writeTo(ByteBuf bb) {
        WRITER.write(bb, this);
    }

    final static Writer WRITER = new Writer();
    static class Writer implements OFMessageWriter<OFPortDescPropBsnFirmwareInfoVer14> {
        @Override
        public void write(ByteBuf bb, OFPortDescPropBsnFirmwareInfoVer14 message) {
            int startIndex = bb.writerIndex();
            // fixed value property type = 0xffff
            bb.writeShort((short) 0xffff);
            // length is length of variable message, will be updated at the end
            int lengthIndex = bb.writerIndex();
            bb.writeShort(U16.t(0));

            // fixed value property experimenter = 0x5c16c7L
            bb.writeInt(0x5c16c7);
            // fixed value property expType = 0x8L
            bb.writeInt(0x8);
            bb.writeBytes(message.firmware);

            // update length field
            int length = bb.writerIndex() - startIndex;
            bb.setShort(lengthIndex, length);

        }
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder("OFPortDescPropBsnFirmwareInfoVer14(");
        b.append("firmware=").append(Arrays.toString(firmware));
        b.append(")");
        return b.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OFPortDescPropBsnFirmwareInfoVer14 other = (OFPortDescPropBsnFirmwareInfoVer14) obj;

        if (!Arrays.equals(firmware, other.firmware))
                return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;

        result = prime * result + Arrays.hashCode(firmware);
        return result;
    }

}
