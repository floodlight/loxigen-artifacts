// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_class.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver14;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Set;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;
import com.google.common.hash.Funnel;

class OFPortDescPropBsnExtendedCapabilitiesVer14 implements OFPortDescPropBsnExtendedCapabilities {
    private static final Logger logger = LoggerFactory.getLogger(OFPortDescPropBsnExtendedCapabilitiesVer14.class);
    // version: 1.4
    final static byte WIRE_VERSION = 5;
    final static int LENGTH = 40;

        private final static short DEFAULT_AN_CONFIGURABLE = (short) 0x0;
        private final static short DEFAULT_FEC_CONFIGURABLE = (short) 0x0;
        private final static short DEFAULT_AN_CONFLICT = (short) 0x0;
        private final static short DEFAULT_FEC_CONFLICT = (short) 0x0;
        private final static U64 DEFAULT_RESERVE1 = U64.ZERO;
        private final static U64 DEFAULT_RESERVE2 = U64.ZERO;
        private final static U64 DEFAULT_RESERVE3 = U64.ZERO;

    // OF message fields
    private final short anConfigurable;
    private final short fecConfigurable;
    private final short anConflict;
    private final short fecConflict;
    private final U64 reserve1;
    private final U64 reserve2;
    private final U64 reserve3;
//
    // Immutable default instance
    final static OFPortDescPropBsnExtendedCapabilitiesVer14 DEFAULT = new OFPortDescPropBsnExtendedCapabilitiesVer14(
        DEFAULT_AN_CONFIGURABLE, DEFAULT_FEC_CONFIGURABLE, DEFAULT_AN_CONFLICT, DEFAULT_FEC_CONFLICT, DEFAULT_RESERVE1, DEFAULT_RESERVE2, DEFAULT_RESERVE3
    );

    // package private constructor - used by readers, builders, and factory
    OFPortDescPropBsnExtendedCapabilitiesVer14(short anConfigurable, short fecConfigurable, short anConflict, short fecConflict, U64 reserve1, U64 reserve2, U64 reserve3) {
        if(reserve1 == null) {
            throw new NullPointerException("OFPortDescPropBsnExtendedCapabilitiesVer14: property reserve1 cannot be null");
        }
        if(reserve2 == null) {
            throw new NullPointerException("OFPortDescPropBsnExtendedCapabilitiesVer14: property reserve2 cannot be null");
        }
        if(reserve3 == null) {
            throw new NullPointerException("OFPortDescPropBsnExtendedCapabilitiesVer14: property reserve3 cannot be null");
        }
        this.anConfigurable = anConfigurable;
        this.fecConfigurable = fecConfigurable;
        this.anConflict = anConflict;
        this.fecConflict = fecConflict;
        this.reserve1 = reserve1;
        this.reserve2 = reserve2;
        this.reserve3 = reserve3;
    }

    // Accessors for OF message fields
    @Override
    public int getType() {
        return 0xffff;
    }

    @Override
    public long getExperimenter() {
        return 0x5c16c7L;
    }

    @Override
    public long getExpType() {
        return 0x8L;
    }

    @Override
    public short getAnConfigurable() {
        return anConfigurable;
    }

    @Override
    public short getFecConfigurable() {
        return fecConfigurable;
    }

    @Override
    public short getAnConflict() {
        return anConflict;
    }

    @Override
    public short getFecConflict() {
        return fecConflict;
    }

    @Override
    public U64 getReserve1() {
        return reserve1;
    }

    @Override
    public U64 getReserve2() {
        return reserve2;
    }

    @Override
    public U64 getReserve3() {
        return reserve3;
    }

    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_14;
    }



    public OFPortDescPropBsnExtendedCapabilities.Builder createBuilder() {
        return new BuilderWithParent(this);
    }

    static class BuilderWithParent implements OFPortDescPropBsnExtendedCapabilities.Builder {
        final OFPortDescPropBsnExtendedCapabilitiesVer14 parentMessage;

        // OF message fields
        private boolean anConfigurableSet;
        private short anConfigurable;
        private boolean fecConfigurableSet;
        private short fecConfigurable;
        private boolean anConflictSet;
        private short anConflict;
        private boolean fecConflictSet;
        private short fecConflict;
        private boolean reserve1Set;
        private U64 reserve1;
        private boolean reserve2Set;
        private U64 reserve2;
        private boolean reserve3Set;
        private U64 reserve3;

        BuilderWithParent(OFPortDescPropBsnExtendedCapabilitiesVer14 parentMessage) {
            this.parentMessage = parentMessage;
        }

    @Override
    public int getType() {
        return 0xffff;
    }

    @Override
    public long getExperimenter() {
        return 0x5c16c7L;
    }

    @Override
    public long getExpType() {
        return 0x8L;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setExpType(long expType) {
            throw new UnsupportedOperationException("Property expType is not writeable");
    }
    @Override
    public short getAnConfigurable() {
        return anConfigurable;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setAnConfigurable(short anConfigurable) {
        this.anConfigurable = anConfigurable;
        this.anConfigurableSet = true;
        return this;
    }
    @Override
    public short getFecConfigurable() {
        return fecConfigurable;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setFecConfigurable(short fecConfigurable) {
        this.fecConfigurable = fecConfigurable;
        this.fecConfigurableSet = true;
        return this;
    }
    @Override
    public short getAnConflict() {
        return anConflict;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setAnConflict(short anConflict) {
        this.anConflict = anConflict;
        this.anConflictSet = true;
        return this;
    }
    @Override
    public short getFecConflict() {
        return fecConflict;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setFecConflict(short fecConflict) {
        this.fecConflict = fecConflict;
        this.fecConflictSet = true;
        return this;
    }
    @Override
    public U64 getReserve1() {
        return reserve1;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setReserve1(U64 reserve1) {
        this.reserve1 = reserve1;
        this.reserve1Set = true;
        return this;
    }
    @Override
    public U64 getReserve2() {
        return reserve2;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setReserve2(U64 reserve2) {
        this.reserve2 = reserve2;
        this.reserve2Set = true;
        return this;
    }
    @Override
    public U64 getReserve3() {
        return reserve3;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setReserve3(U64 reserve3) {
        this.reserve3 = reserve3;
        this.reserve3Set = true;
        return this;
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_14;
    }



        @Override
        public OFPortDescPropBsnExtendedCapabilities build() {
                short anConfigurable = this.anConfigurableSet ? this.anConfigurable : parentMessage.anConfigurable;
                short fecConfigurable = this.fecConfigurableSet ? this.fecConfigurable : parentMessage.fecConfigurable;
                short anConflict = this.anConflictSet ? this.anConflict : parentMessage.anConflict;
                short fecConflict = this.fecConflictSet ? this.fecConflict : parentMessage.fecConflict;
                U64 reserve1 = this.reserve1Set ? this.reserve1 : parentMessage.reserve1;
                if(reserve1 == null)
                    throw new NullPointerException("Property reserve1 must not be null");
                U64 reserve2 = this.reserve2Set ? this.reserve2 : parentMessage.reserve2;
                if(reserve2 == null)
                    throw new NullPointerException("Property reserve2 must not be null");
                U64 reserve3 = this.reserve3Set ? this.reserve3 : parentMessage.reserve3;
                if(reserve3 == null)
                    throw new NullPointerException("Property reserve3 must not be null");

                //
                return new OFPortDescPropBsnExtendedCapabilitiesVer14(
                    anConfigurable,
                    fecConfigurable,
                    anConflict,
                    fecConflict,
                    reserve1,
                    reserve2,
                    reserve3
                );
        }

    }

    static class Builder implements OFPortDescPropBsnExtendedCapabilities.Builder {
        // OF message fields
        private boolean anConfigurableSet;
        private short anConfigurable;
        private boolean fecConfigurableSet;
        private short fecConfigurable;
        private boolean anConflictSet;
        private short anConflict;
        private boolean fecConflictSet;
        private short fecConflict;
        private boolean reserve1Set;
        private U64 reserve1;
        private boolean reserve2Set;
        private U64 reserve2;
        private boolean reserve3Set;
        private U64 reserve3;

    @Override
    public int getType() {
        return 0xffff;
    }

    @Override
    public long getExperimenter() {
        return 0x5c16c7L;
    }

    @Override
    public long getExpType() {
        return 0x8L;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setExpType(long expType) {
            throw new UnsupportedOperationException("Property expType is not writeable");
    }
    @Override
    public short getAnConfigurable() {
        return anConfigurable;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setAnConfigurable(short anConfigurable) {
        this.anConfigurable = anConfigurable;
        this.anConfigurableSet = true;
        return this;
    }
    @Override
    public short getFecConfigurable() {
        return fecConfigurable;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setFecConfigurable(short fecConfigurable) {
        this.fecConfigurable = fecConfigurable;
        this.fecConfigurableSet = true;
        return this;
    }
    @Override
    public short getAnConflict() {
        return anConflict;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setAnConflict(short anConflict) {
        this.anConflict = anConflict;
        this.anConflictSet = true;
        return this;
    }
    @Override
    public short getFecConflict() {
        return fecConflict;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setFecConflict(short fecConflict) {
        this.fecConflict = fecConflict;
        this.fecConflictSet = true;
        return this;
    }
    @Override
    public U64 getReserve1() {
        return reserve1;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setReserve1(U64 reserve1) {
        this.reserve1 = reserve1;
        this.reserve1Set = true;
        return this;
    }
    @Override
    public U64 getReserve2() {
        return reserve2;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setReserve2(U64 reserve2) {
        this.reserve2 = reserve2;
        this.reserve2Set = true;
        return this;
    }
    @Override
    public U64 getReserve3() {
        return reserve3;
    }

    @Override
    public OFPortDescPropBsnExtendedCapabilities.Builder setReserve3(U64 reserve3) {
        this.reserve3 = reserve3;
        this.reserve3Set = true;
        return this;
    }
    @Override
    public OFVersion getVersion() {
        return OFVersion.OF_14;
    }

//
        @Override
        public OFPortDescPropBsnExtendedCapabilities build() {
            short anConfigurable = this.anConfigurableSet ? this.anConfigurable : DEFAULT_AN_CONFIGURABLE;
            short fecConfigurable = this.fecConfigurableSet ? this.fecConfigurable : DEFAULT_FEC_CONFIGURABLE;
            short anConflict = this.anConflictSet ? this.anConflict : DEFAULT_AN_CONFLICT;
            short fecConflict = this.fecConflictSet ? this.fecConflict : DEFAULT_FEC_CONFLICT;
            U64 reserve1 = this.reserve1Set ? this.reserve1 : DEFAULT_RESERVE1;
            if(reserve1 == null)
                throw new NullPointerException("Property reserve1 must not be null");
            U64 reserve2 = this.reserve2Set ? this.reserve2 : DEFAULT_RESERVE2;
            if(reserve2 == null)
                throw new NullPointerException("Property reserve2 must not be null");
            U64 reserve3 = this.reserve3Set ? this.reserve3 : DEFAULT_RESERVE3;
            if(reserve3 == null)
                throw new NullPointerException("Property reserve3 must not be null");


            return new OFPortDescPropBsnExtendedCapabilitiesVer14(
                    anConfigurable,
                    fecConfigurable,
                    anConflict,
                    fecConflict,
                    reserve1,
                    reserve2,
                    reserve3
                );
        }

    }


    final static Reader READER = new Reader();
    static class Reader implements OFMessageReader<OFPortDescPropBsnExtendedCapabilities> {
        @Override
        public OFPortDescPropBsnExtendedCapabilities readFrom(ByteBuf bb) throws OFParseError {
            int start = bb.readerIndex();
            // fixed value property type == 0xffff
            short type = bb.readShort();
            if(type != (short) 0xffff)
                throw new OFParseError("Wrong type: Expected=0xffff(0xffff), got="+type);
            int length = U16.f(bb.readShort());
            if(length != 40)
                throw new OFParseError("Wrong length: Expected=40(40), got="+length);
            if(bb.readableBytes() + (bb.readerIndex() - start) < length) {
                // Buffer does not have all data yet
                bb.readerIndex(start);
                return null;
            }
            if(logger.isTraceEnabled())
                logger.trace("readFrom - length={}", length);
            // fixed value property experimenter == 0x5c16c7L
            int experimenter = bb.readInt();
            if(experimenter != 0x5c16c7)
                throw new OFParseError("Wrong experimenter: Expected=0x5c16c7L(0x5c16c7L), got="+experimenter);
            // fixed value property expType == 0x8L
            int expType = bb.readInt();
            if(expType != 0x8)
                throw new OFParseError("Wrong expType: Expected=0x8L(0x8L), got="+expType);
            short anConfigurable = U8.f(bb.readByte());
            short fecConfigurable = U8.f(bb.readByte());
            short anConflict = U8.f(bb.readByte());
            short fecConflict = U8.f(bb.readByte());
            U64 reserve1 = U64.ofRaw(bb.readLong());
            U64 reserve2 = U64.ofRaw(bb.readLong());
            U64 reserve3 = U64.ofRaw(bb.readLong());

            OFPortDescPropBsnExtendedCapabilitiesVer14 portDescPropBsnExtendedCapabilitiesVer14 = new OFPortDescPropBsnExtendedCapabilitiesVer14(
                    anConfigurable,
                      fecConfigurable,
                      anConflict,
                      fecConflict,
                      reserve1,
                      reserve2,
                      reserve3
                    );
            if(logger.isTraceEnabled())
                logger.trace("readFrom - read={}", portDescPropBsnExtendedCapabilitiesVer14);
            return portDescPropBsnExtendedCapabilitiesVer14;
        }
    }

    public void putTo(PrimitiveSink sink) {
        FUNNEL.funnel(this, sink);
    }

    final static OFPortDescPropBsnExtendedCapabilitiesVer14Funnel FUNNEL = new OFPortDescPropBsnExtendedCapabilitiesVer14Funnel();
    static class OFPortDescPropBsnExtendedCapabilitiesVer14Funnel implements Funnel<OFPortDescPropBsnExtendedCapabilitiesVer14> {
        private static final long serialVersionUID = 1L;
        @Override
        public void funnel(OFPortDescPropBsnExtendedCapabilitiesVer14 message, PrimitiveSink sink) {
            // fixed value property type = 0xffff
            sink.putShort((short) 0xffff);
            // fixed value property length = 40
            sink.putShort((short) 0x28);
            // fixed value property experimenter = 0x5c16c7L
            sink.putInt(0x5c16c7);
            // fixed value property expType = 0x8L
            sink.putInt(0x8);
            sink.putShort(message.anConfigurable);
            sink.putShort(message.fecConfigurable);
            sink.putShort(message.anConflict);
            sink.putShort(message.fecConflict);
            message.reserve1.putTo(sink);
            message.reserve2.putTo(sink);
            message.reserve3.putTo(sink);
        }
    }


    public void writeTo(ByteBuf bb) {
        WRITER.write(bb, this);
    }

    final static Writer WRITER = new Writer();
    static class Writer implements OFMessageWriter<OFPortDescPropBsnExtendedCapabilitiesVer14> {
        @Override
        public void write(ByteBuf bb, OFPortDescPropBsnExtendedCapabilitiesVer14 message) {
            // fixed value property type = 0xffff
            bb.writeShort((short) 0xffff);
            // fixed value property length = 40
            bb.writeShort((short) 0x28);
            // fixed value property experimenter = 0x5c16c7L
            bb.writeInt(0x5c16c7);
            // fixed value property expType = 0x8L
            bb.writeInt(0x8);
            bb.writeByte(U8.t(message.anConfigurable));
            bb.writeByte(U8.t(message.fecConfigurable));
            bb.writeByte(U8.t(message.anConflict));
            bb.writeByte(U8.t(message.fecConflict));
            bb.writeLong(message.reserve1.getValue());
            bb.writeLong(message.reserve2.getValue());
            bb.writeLong(message.reserve3.getValue());


        }
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder("OFPortDescPropBsnExtendedCapabilitiesVer14(");
        b.append("anConfigurable=").append(anConfigurable);
        b.append(", ");
        b.append("fecConfigurable=").append(fecConfigurable);
        b.append(", ");
        b.append("anConflict=").append(anConflict);
        b.append(", ");
        b.append("fecConflict=").append(fecConflict);
        b.append(", ");
        b.append("reserve1=").append(reserve1);
        b.append(", ");
        b.append("reserve2=").append(reserve2);
        b.append(", ");
        b.append("reserve3=").append(reserve3);
        b.append(")");
        return b.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OFPortDescPropBsnExtendedCapabilitiesVer14 other = (OFPortDescPropBsnExtendedCapabilitiesVer14) obj;

        if( anConfigurable != other.anConfigurable)
            return false;
        if( fecConfigurable != other.fecConfigurable)
            return false;
        if( anConflict != other.anConflict)
            return false;
        if( fecConflict != other.fecConflict)
            return false;
        if (reserve1 == null) {
            if (other.reserve1 != null)
                return false;
        } else if (!reserve1.equals(other.reserve1))
            return false;
        if (reserve2 == null) {
            if (other.reserve2 != null)
                return false;
        } else if (!reserve2.equals(other.reserve2))
            return false;
        if (reserve3 == null) {
            if (other.reserve3 != null)
                return false;
        } else if (!reserve3.equals(other.reserve3))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;

        result = prime * result + anConfigurable;
        result = prime * result + fecConfigurable;
        result = prime * result + anConflict;
        result = prime * result + fecConflict;
        result = prime * result + ((reserve1 == null) ? 0 : reserve1.hashCode());
        result = prime * result + ((reserve2 == null) ? 0 : reserve2.hashCode());
        result = prime * result + ((reserve3 == null) ? 0 : reserve3.hashCode());
        return result;
    }

}
