// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_factory_class.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;


public class OFOxmsVer15 implements OFOxms {
    public final static OFOxmsVer15 INSTANCE = new OFOxmsVer15();




    public OFOxmActsetOutput.Builder buildActsetOutput() {
        return new OFOxmActsetOutputVer15.Builder();
    }
    public OFOxmActsetOutput actsetOutput(OFPort value) {
        return new OFOxmActsetOutputVer15(
                value
                    );
    }

    public OFOxmActsetOutputMasked.Builder buildActsetOutputMasked() {
        return new OFOxmActsetOutputMaskedVer15.Builder();
    }
    public OFOxmActsetOutputMasked actsetOutputMasked(OFPort value, OFPort mask) {
        return new OFOxmActsetOutputMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmArpOp.Builder buildArpOp() {
        return new OFOxmArpOpVer15.Builder();
    }
    public OFOxmArpOp arpOp(ArpOpcode value) {
        return new OFOxmArpOpVer15(
                value
                    );
    }

    public OFOxmArpOpMasked.Builder buildArpOpMasked() {
        return new OFOxmArpOpMaskedVer15.Builder();
    }
    public OFOxmArpOpMasked arpOpMasked(ArpOpcode value, ArpOpcode mask) {
        return new OFOxmArpOpMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmArpSha.Builder buildArpSha() {
        return new OFOxmArpShaVer15.Builder();
    }
    public OFOxmArpSha arpSha(MacAddress value) {
        return new OFOxmArpShaVer15(
                value
                    );
    }

    public OFOxmArpShaMasked.Builder buildArpShaMasked() {
        return new OFOxmArpShaMaskedVer15.Builder();
    }
    public OFOxmArpShaMasked arpShaMasked(MacAddress value, MacAddress mask) {
        return new OFOxmArpShaMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmArpSpa.Builder buildArpSpa() {
        return new OFOxmArpSpaVer15.Builder();
    }
    public OFOxmArpSpa arpSpa(IPv4Address value) {
        return new OFOxmArpSpaVer15(
                value
                    );
    }

    public OFOxmArpSpaMasked.Builder buildArpSpaMasked() {
        return new OFOxmArpSpaMaskedVer15.Builder();
    }
    public OFOxmArpSpaMasked arpSpaMasked(IPv4Address value, IPv4Address mask) {
        return new OFOxmArpSpaMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmArpTha.Builder buildArpTha() {
        return new OFOxmArpThaVer15.Builder();
    }
    public OFOxmArpTha arpTha(MacAddress value) {
        return new OFOxmArpThaVer15(
                value
                    );
    }

    public OFOxmArpThaMasked.Builder buildArpThaMasked() {
        return new OFOxmArpThaMaskedVer15.Builder();
    }
    public OFOxmArpThaMasked arpThaMasked(MacAddress value, MacAddress mask) {
        return new OFOxmArpThaMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmArpTpa.Builder buildArpTpa() {
        return new OFOxmArpTpaVer15.Builder();
    }
    public OFOxmArpTpa arpTpa(IPv4Address value) {
        return new OFOxmArpTpaVer15(
                value
                    );
    }

    public OFOxmArpTpaMasked.Builder buildArpTpaMasked() {
        return new OFOxmArpTpaMaskedVer15.Builder();
    }
    public OFOxmArpTpaMasked arpTpaMasked(IPv4Address value, IPv4Address mask) {
        return new OFOxmArpTpaMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnEgrPortGroupId.Builder buildBsnEgrPortGroupId() {
        return new OFOxmBsnEgrPortGroupIdVer15.Builder();
    }
    public OFOxmBsnEgrPortGroupId bsnEgrPortGroupId(ClassId value) {
        return new OFOxmBsnEgrPortGroupIdVer15(
                value
                    );
    }

    public OFOxmBsnEgrPortGroupIdMasked.Builder buildBsnEgrPortGroupIdMasked() {
        return new OFOxmBsnEgrPortGroupIdMaskedVer15.Builder();
    }
    public OFOxmBsnEgrPortGroupIdMasked bsnEgrPortGroupIdMasked(ClassId value, ClassId mask) {
        return new OFOxmBsnEgrPortGroupIdMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnGlobalVrfAllowed.Builder buildBsnGlobalVrfAllowed() {
        throw new UnsupportedOperationException("OFOxmBsnGlobalVrfAllowed not supported in version 1.5");
    }
    public OFOxmBsnGlobalVrfAllowed bsnGlobalVrfAllowed(OFBooleanValue value) {
        throw new UnsupportedOperationException("OFOxmBsnGlobalVrfAllowed not supported in version 1.5");
    }

    public OFOxmBsnGlobalVrfAllowedMasked.Builder buildBsnGlobalVrfAllowedMasked() {
        throw new UnsupportedOperationException("OFOxmBsnGlobalVrfAllowedMasked not supported in version 1.5");
    }
    public OFOxmBsnGlobalVrfAllowedMasked bsnGlobalVrfAllowedMasked(OFBooleanValue value, OFBooleanValue mask) {
        throw new UnsupportedOperationException("OFOxmBsnGlobalVrfAllowedMasked not supported in version 1.5");
    }

    public OFOxmBsnIfpClassId.Builder buildBsnIfpClassId() {
        return new OFOxmBsnIfpClassIdVer15.Builder();
    }
    public OFOxmBsnIfpClassId bsnIfpClassId(ClassId value) {
        return new OFOxmBsnIfpClassIdVer15(
                value
                    );
    }

    public OFOxmBsnIfpClassIdMasked.Builder buildBsnIfpClassIdMasked() {
        return new OFOxmBsnIfpClassIdMaskedVer15.Builder();
    }
    public OFOxmBsnIfpClassIdMasked bsnIfpClassIdMasked(ClassId value, ClassId mask) {
        return new OFOxmBsnIfpClassIdMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnInPorts128.Builder buildBsnInPorts128() {
        return new OFOxmBsnInPorts128Ver15.Builder();
    }
    public OFOxmBsnInPorts128 bsnInPorts128(OFBitMask128 value) {
        return new OFOxmBsnInPorts128Ver15(
                value
                    );
    }

    public OFOxmBsnInPorts128Masked.Builder buildBsnInPorts128Masked() {
        return new OFOxmBsnInPorts128MaskedVer15.Builder();
    }
    public OFOxmBsnInPorts128Masked bsnInPorts128Masked(OFBitMask128 value, OFBitMask128 mask) {
        return new OFOxmBsnInPorts128MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnInPorts512.Builder buildBsnInPorts512() {
        return new OFOxmBsnInPorts512Ver15.Builder();
    }
    public OFOxmBsnInPorts512 bsnInPorts512(OFBitMask512 value) {
        return new OFOxmBsnInPorts512Ver15(
                value
                    );
    }

    public OFOxmBsnInPorts512Masked.Builder buildBsnInPorts512Masked() {
        return new OFOxmBsnInPorts512MaskedVer15.Builder();
    }
    public OFOxmBsnInPorts512Masked bsnInPorts512Masked(OFBitMask512 value, OFBitMask512 mask) {
        return new OFOxmBsnInPorts512MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnIngressPortGroupId.Builder buildBsnIngressPortGroupId() {
        return new OFOxmBsnIngressPortGroupIdVer15.Builder();
    }
    public OFOxmBsnIngressPortGroupId bsnIngressPortGroupId(ClassId value) {
        return new OFOxmBsnIngressPortGroupIdVer15(
                value
                    );
    }

    public OFOxmBsnIngressPortGroupIdMasked.Builder buildBsnIngressPortGroupIdMasked() {
        return new OFOxmBsnIngressPortGroupIdMaskedVer15.Builder();
    }
    public OFOxmBsnIngressPortGroupIdMasked bsnIngressPortGroupIdMasked(ClassId value, ClassId mask) {
        return new OFOxmBsnIngressPortGroupIdMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnInnerEthDst.Builder buildBsnInnerEthDst() {
        return new OFOxmBsnInnerEthDstVer15.Builder();
    }
    public OFOxmBsnInnerEthDst bsnInnerEthDst(MacAddress value) {
        return new OFOxmBsnInnerEthDstVer15(
                value
                    );
    }

    public OFOxmBsnInnerEthDstMasked.Builder buildBsnInnerEthDstMasked() {
        return new OFOxmBsnInnerEthDstMaskedVer15.Builder();
    }
    public OFOxmBsnInnerEthDstMasked bsnInnerEthDstMasked(MacAddress value, MacAddress mask) {
        return new OFOxmBsnInnerEthDstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnInnerEthSrc.Builder buildBsnInnerEthSrc() {
        return new OFOxmBsnInnerEthSrcVer15.Builder();
    }
    public OFOxmBsnInnerEthSrc bsnInnerEthSrc(MacAddress value) {
        return new OFOxmBsnInnerEthSrcVer15(
                value
                    );
    }

    public OFOxmBsnInnerEthSrcMasked.Builder buildBsnInnerEthSrcMasked() {
        return new OFOxmBsnInnerEthSrcMaskedVer15.Builder();
    }
    public OFOxmBsnInnerEthSrcMasked bsnInnerEthSrcMasked(MacAddress value, MacAddress mask) {
        return new OFOxmBsnInnerEthSrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnInnerVlanVid.Builder buildBsnInnerVlanVid() {
        return new OFOxmBsnInnerVlanVidVer15.Builder();
    }
    public OFOxmBsnInnerVlanVid bsnInnerVlanVid(OFVlanVidMatch value) {
        return new OFOxmBsnInnerVlanVidVer15(
                value
                    );
    }

    public OFOxmBsnInnerVlanVidMasked.Builder buildBsnInnerVlanVidMasked() {
        return new OFOxmBsnInnerVlanVidMaskedVer15.Builder();
    }
    public OFOxmBsnInnerVlanVidMasked bsnInnerVlanVidMasked(OFVlanVidMatch value, OFVlanVidMatch mask) {
        return new OFOxmBsnInnerVlanVidMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnIpFragmentation.Builder buildBsnIpFragmentation() {
        return new OFOxmBsnIpFragmentationVer15.Builder();
    }
    public OFOxmBsnIpFragmentation bsnIpFragmentation(OFBooleanValue value) {
        return new OFOxmBsnIpFragmentationVer15(
                value
                    );
    }

    public OFOxmBsnIpFragmentationMasked.Builder buildBsnIpFragmentationMasked() {
        return new OFOxmBsnIpFragmentationMaskedVer15.Builder();
    }
    public OFOxmBsnIpFragmentationMasked bsnIpFragmentationMasked(OFBooleanValue value, OFBooleanValue mask) {
        return new OFOxmBsnIpFragmentationMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnL2CacheHit.Builder buildBsnL2CacheHit() {
        return new OFOxmBsnL2CacheHitVer15.Builder();
    }
    public OFOxmBsnL2CacheHit bsnL2CacheHit(OFBooleanValue value) {
        return new OFOxmBsnL2CacheHitVer15(
                value
                    );
    }

    public OFOxmBsnL2CacheHitMasked.Builder buildBsnL2CacheHitMasked() {
        return new OFOxmBsnL2CacheHitMaskedVer15.Builder();
    }
    public OFOxmBsnL2CacheHitMasked bsnL2CacheHitMasked(OFBooleanValue value, OFBooleanValue mask) {
        return new OFOxmBsnL2CacheHitMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnL3DstClassId.Builder buildBsnL3DstClassId() {
        throw new UnsupportedOperationException("OFOxmBsnL3DstClassId not supported in version 1.5");
    }
    public OFOxmBsnL3DstClassId bsnL3DstClassId(ClassId value) {
        throw new UnsupportedOperationException("OFOxmBsnL3DstClassId not supported in version 1.5");
    }

    public OFOxmBsnL3DstClassIdMasked.Builder buildBsnL3DstClassIdMasked() {
        throw new UnsupportedOperationException("OFOxmBsnL3DstClassIdMasked not supported in version 1.5");
    }
    public OFOxmBsnL3DstClassIdMasked bsnL3DstClassIdMasked(ClassId value, ClassId mask) {
        throw new UnsupportedOperationException("OFOxmBsnL3DstClassIdMasked not supported in version 1.5");
    }

    public OFOxmBsnL3InterfaceClassId.Builder buildBsnL3InterfaceClassId() {
        return new OFOxmBsnL3InterfaceClassIdVer15.Builder();
    }
    public OFOxmBsnL3InterfaceClassId bsnL3InterfaceClassId(ClassId value) {
        return new OFOxmBsnL3InterfaceClassIdVer15(
                value
                    );
    }

    public OFOxmBsnL3InterfaceClassIdMasked.Builder buildBsnL3InterfaceClassIdMasked() {
        return new OFOxmBsnL3InterfaceClassIdMaskedVer15.Builder();
    }
    public OFOxmBsnL3InterfaceClassIdMasked bsnL3InterfaceClassIdMasked(ClassId value, ClassId mask) {
        return new OFOxmBsnL3InterfaceClassIdMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnL3SrcClassId.Builder buildBsnL3SrcClassId() {
        return new OFOxmBsnL3SrcClassIdVer15.Builder();
    }
    public OFOxmBsnL3SrcClassId bsnL3SrcClassId(ClassId value) {
        return new OFOxmBsnL3SrcClassIdVer15(
                value
                    );
    }

    public OFOxmBsnL3SrcClassIdMasked.Builder buildBsnL3SrcClassIdMasked() {
        return new OFOxmBsnL3SrcClassIdMaskedVer15.Builder();
    }
    public OFOxmBsnL3SrcClassIdMasked bsnL3SrcClassIdMasked(ClassId value, ClassId mask) {
        return new OFOxmBsnL3SrcClassIdMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnLagId.Builder buildBsnLagId() {
        return new OFOxmBsnLagIdVer15.Builder();
    }
    public OFOxmBsnLagId bsnLagId(LagId value) {
        return new OFOxmBsnLagIdVer15(
                value
                    );
    }

    public OFOxmBsnLagIdMasked.Builder buildBsnLagIdMasked() {
        return new OFOxmBsnLagIdMaskedVer15.Builder();
    }
    public OFOxmBsnLagIdMasked bsnLagIdMasked(LagId value, LagId mask) {
        return new OFOxmBsnLagIdMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnTcpFlags.Builder buildBsnTcpFlags() {
        return new OFOxmBsnTcpFlagsVer15.Builder();
    }
    public OFOxmBsnTcpFlags bsnTcpFlags(U16 value) {
        return new OFOxmBsnTcpFlagsVer15(
                value
                    );
    }

    public OFOxmBsnTcpFlagsMasked.Builder buildBsnTcpFlagsMasked() {
        return new OFOxmBsnTcpFlagsMaskedVer15.Builder();
    }
    public OFOxmBsnTcpFlagsMasked bsnTcpFlagsMasked(U16 value, U16 mask) {
        return new OFOxmBsnTcpFlagsMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnUdf0.Builder buildBsnUdf0() {
        return new OFOxmBsnUdf0Ver15.Builder();
    }
    public OFOxmBsnUdf0 bsnUdf0(UDF value) {
        return new OFOxmBsnUdf0Ver15(
                value
                    );
    }

    public OFOxmBsnUdf0Masked.Builder buildBsnUdf0Masked() {
        return new OFOxmBsnUdf0MaskedVer15.Builder();
    }
    public OFOxmBsnUdf0Masked bsnUdf0Masked(UDF value, UDF mask) {
        return new OFOxmBsnUdf0MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnUdf1.Builder buildBsnUdf1() {
        return new OFOxmBsnUdf1Ver15.Builder();
    }
    public OFOxmBsnUdf1 bsnUdf1(UDF value) {
        return new OFOxmBsnUdf1Ver15(
                value
                    );
    }

    public OFOxmBsnUdf1Masked.Builder buildBsnUdf1Masked() {
        return new OFOxmBsnUdf1MaskedVer15.Builder();
    }
    public OFOxmBsnUdf1Masked bsnUdf1Masked(UDF value, UDF mask) {
        return new OFOxmBsnUdf1MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnUdf2.Builder buildBsnUdf2() {
        return new OFOxmBsnUdf2Ver15.Builder();
    }
    public OFOxmBsnUdf2 bsnUdf2(UDF value) {
        return new OFOxmBsnUdf2Ver15(
                value
                    );
    }

    public OFOxmBsnUdf2Masked.Builder buildBsnUdf2Masked() {
        return new OFOxmBsnUdf2MaskedVer15.Builder();
    }
    public OFOxmBsnUdf2Masked bsnUdf2Masked(UDF value, UDF mask) {
        return new OFOxmBsnUdf2MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnUdf3.Builder buildBsnUdf3() {
        return new OFOxmBsnUdf3Ver15.Builder();
    }
    public OFOxmBsnUdf3 bsnUdf3(UDF value) {
        return new OFOxmBsnUdf3Ver15(
                value
                    );
    }

    public OFOxmBsnUdf3Masked.Builder buildBsnUdf3Masked() {
        return new OFOxmBsnUdf3MaskedVer15.Builder();
    }
    public OFOxmBsnUdf3Masked bsnUdf3Masked(UDF value, UDF mask) {
        return new OFOxmBsnUdf3MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnUdf4.Builder buildBsnUdf4() {
        return new OFOxmBsnUdf4Ver15.Builder();
    }
    public OFOxmBsnUdf4 bsnUdf4(UDF value) {
        return new OFOxmBsnUdf4Ver15(
                value
                    );
    }

    public OFOxmBsnUdf4Masked.Builder buildBsnUdf4Masked() {
        return new OFOxmBsnUdf4MaskedVer15.Builder();
    }
    public OFOxmBsnUdf4Masked bsnUdf4Masked(UDF value, UDF mask) {
        return new OFOxmBsnUdf4MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnUdf5.Builder buildBsnUdf5() {
        return new OFOxmBsnUdf5Ver15.Builder();
    }
    public OFOxmBsnUdf5 bsnUdf5(UDF value) {
        return new OFOxmBsnUdf5Ver15(
                value
                    );
    }

    public OFOxmBsnUdf5Masked.Builder buildBsnUdf5Masked() {
        return new OFOxmBsnUdf5MaskedVer15.Builder();
    }
    public OFOxmBsnUdf5Masked bsnUdf5Masked(UDF value, UDF mask) {
        return new OFOxmBsnUdf5MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnUdf6.Builder buildBsnUdf6() {
        return new OFOxmBsnUdf6Ver15.Builder();
    }
    public OFOxmBsnUdf6 bsnUdf6(UDF value) {
        return new OFOxmBsnUdf6Ver15(
                value
                    );
    }

    public OFOxmBsnUdf6Masked.Builder buildBsnUdf6Masked() {
        return new OFOxmBsnUdf6MaskedVer15.Builder();
    }
    public OFOxmBsnUdf6Masked bsnUdf6Masked(UDF value, UDF mask) {
        return new OFOxmBsnUdf6MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnUdf7.Builder buildBsnUdf7() {
        return new OFOxmBsnUdf7Ver15.Builder();
    }
    public OFOxmBsnUdf7 bsnUdf7(UDF value) {
        return new OFOxmBsnUdf7Ver15(
                value
                    );
    }

    public OFOxmBsnUdf7Masked.Builder buildBsnUdf7Masked() {
        return new OFOxmBsnUdf7MaskedVer15.Builder();
    }
    public OFOxmBsnUdf7Masked bsnUdf7Masked(UDF value, UDF mask) {
        return new OFOxmBsnUdf7MaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnVfi.Builder buildBsnVfi() {
        return new OFOxmBsnVfiVer15.Builder();
    }
    public OFOxmBsnVfi bsnVfi(VFI value) {
        return new OFOxmBsnVfiVer15(
                value
                    );
    }

    public OFOxmBsnVfiMasked.Builder buildBsnVfiMasked() {
        return new OFOxmBsnVfiMaskedVer15.Builder();
    }
    public OFOxmBsnVfiMasked bsnVfiMasked(VFI value, VFI mask) {
        return new OFOxmBsnVfiMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnVlanXlatePortGroupId.Builder buildBsnVlanXlatePortGroupId() {
        return new OFOxmBsnVlanXlatePortGroupIdVer15.Builder();
    }
    public OFOxmBsnVlanXlatePortGroupId bsnVlanXlatePortGroupId(ClassId value) {
        return new OFOxmBsnVlanXlatePortGroupIdVer15(
                value
                    );
    }

    public OFOxmBsnVlanXlatePortGroupIdMasked.Builder buildBsnVlanXlatePortGroupIdMasked() {
        return new OFOxmBsnVlanXlatePortGroupIdMaskedVer15.Builder();
    }
    public OFOxmBsnVlanXlatePortGroupIdMasked bsnVlanXlatePortGroupIdMasked(ClassId value, ClassId mask) {
        return new OFOxmBsnVlanXlatePortGroupIdMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnVrf.Builder buildBsnVrf() {
        return new OFOxmBsnVrfVer15.Builder();
    }
    public OFOxmBsnVrf bsnVrf(VRF value) {
        return new OFOxmBsnVrfVer15(
                value
                    );
    }

    public OFOxmBsnVrfMasked.Builder buildBsnVrfMasked() {
        return new OFOxmBsnVrfMaskedVer15.Builder();
    }
    public OFOxmBsnVrfMasked bsnVrfMasked(VRF value, VRF mask) {
        return new OFOxmBsnVrfMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmBsnVxlanNetworkId.Builder buildBsnVxlanNetworkId() {
        return new OFOxmBsnVxlanNetworkIdVer15.Builder();
    }
    public OFOxmBsnVxlanNetworkId bsnVxlanNetworkId(VxlanNI value) {
        return new OFOxmBsnVxlanNetworkIdVer15(
                value
                    );
    }

    public OFOxmBsnVxlanNetworkIdMasked.Builder buildBsnVxlanNetworkIdMasked() {
        return new OFOxmBsnVxlanNetworkIdMaskedVer15.Builder();
    }
    public OFOxmBsnVxlanNetworkIdMasked bsnVxlanNetworkIdMasked(VxlanNI value, VxlanNI mask) {
        return new OFOxmBsnVxlanNetworkIdMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingIpv6Dst.Builder buildConnTrackingIpv6Dst() {
        return new OFOxmConnTrackingIpv6DstVer15.Builder();
    }
    public OFOxmConnTrackingIpv6Dst connTrackingIpv6Dst(IPv6Address value) {
        return new OFOxmConnTrackingIpv6DstVer15(
                value
                    );
    }

    public OFOxmConnTrackingIpv6DstMasked.Builder buildConnTrackingIpv6DstMasked() {
        return new OFOxmConnTrackingIpv6DstMaskedVer15.Builder();
    }
    public OFOxmConnTrackingIpv6DstMasked connTrackingIpv6DstMasked(IPv6Address value, IPv6Address mask) {
        return new OFOxmConnTrackingIpv6DstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingIpv6Src.Builder buildConnTrackingIpv6Src() {
        return new OFOxmConnTrackingIpv6SrcVer15.Builder();
    }
    public OFOxmConnTrackingIpv6Src connTrackingIpv6Src(IPv6Address value) {
        return new OFOxmConnTrackingIpv6SrcVer15(
                value
                    );
    }

    public OFOxmConnTrackingIpv6SrcMasked.Builder buildConnTrackingIpv6SrcMasked() {
        return new OFOxmConnTrackingIpv6SrcMaskedVer15.Builder();
    }
    public OFOxmConnTrackingIpv6SrcMasked connTrackingIpv6SrcMasked(IPv6Address value, IPv6Address mask) {
        return new OFOxmConnTrackingIpv6SrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingLabel.Builder buildConnTrackingLabel() {
        return new OFOxmConnTrackingLabelVer15.Builder();
    }
    public OFOxmConnTrackingLabel connTrackingLabel(U128 value) {
        return new OFOxmConnTrackingLabelVer15(
                value
                    );
    }

    public OFOxmConnTrackingLabelMasked.Builder buildConnTrackingLabelMasked() {
        return new OFOxmConnTrackingLabelMaskedVer15.Builder();
    }
    public OFOxmConnTrackingLabelMasked connTrackingLabelMasked(U128 value, U128 mask) {
        return new OFOxmConnTrackingLabelMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingMark.Builder buildConnTrackingMark() {
        return new OFOxmConnTrackingMarkVer15.Builder();
    }
    public OFOxmConnTrackingMark connTrackingMark(U32 value) {
        return new OFOxmConnTrackingMarkVer15(
                value
                    );
    }

    public OFOxmConnTrackingMarkMasked.Builder buildConnTrackingMarkMasked() {
        return new OFOxmConnTrackingMarkMaskedVer15.Builder();
    }
    public OFOxmConnTrackingMarkMasked connTrackingMarkMasked(U32 value, U32 mask) {
        return new OFOxmConnTrackingMarkMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingNwDst.Builder buildConnTrackingNwDst() {
        return new OFOxmConnTrackingNwDstVer15.Builder();
    }
    public OFOxmConnTrackingNwDst connTrackingNwDst(U32 value) {
        return new OFOxmConnTrackingNwDstVer15(
                value
                    );
    }

    public OFOxmConnTrackingNwDstMasked.Builder buildConnTrackingNwDstMasked() {
        return new OFOxmConnTrackingNwDstMaskedVer15.Builder();
    }
    public OFOxmConnTrackingNwDstMasked connTrackingNwDstMasked(U32 value, U32 mask) {
        return new OFOxmConnTrackingNwDstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingNwProto.Builder buildConnTrackingNwProto() {
        return new OFOxmConnTrackingNwProtoVer15.Builder();
    }
    public OFOxmConnTrackingNwProto connTrackingNwProto(U8 value) {
        return new OFOxmConnTrackingNwProtoVer15(
                value
                    );
    }

    public OFOxmConnTrackingNwProtoMasked.Builder buildConnTrackingNwProtoMasked() {
        return new OFOxmConnTrackingNwProtoMaskedVer15.Builder();
    }
    public OFOxmConnTrackingNwProtoMasked connTrackingNwProtoMasked(U8 value, U8 mask) {
        return new OFOxmConnTrackingNwProtoMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingNwSrc.Builder buildConnTrackingNwSrc() {
        return new OFOxmConnTrackingNwSrcVer15.Builder();
    }
    public OFOxmConnTrackingNwSrc connTrackingNwSrc(U32 value) {
        return new OFOxmConnTrackingNwSrcVer15(
                value
                    );
    }

    public OFOxmConnTrackingNwSrcMasked.Builder buildConnTrackingNwSrcMasked() {
        return new OFOxmConnTrackingNwSrcMaskedVer15.Builder();
    }
    public OFOxmConnTrackingNwSrcMasked connTrackingNwSrcMasked(U32 value, U32 mask) {
        return new OFOxmConnTrackingNwSrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingState.Builder buildConnTrackingState() {
        return new OFOxmConnTrackingStateVer15.Builder();
    }
    public OFOxmConnTrackingState connTrackingState(U32 value) {
        return new OFOxmConnTrackingStateVer15(
                value
                    );
    }

    public OFOxmConnTrackingStateMasked.Builder buildConnTrackingStateMasked() {
        return new OFOxmConnTrackingStateMaskedVer15.Builder();
    }
    public OFOxmConnTrackingStateMasked connTrackingStateMasked(U32 value, U32 mask) {
        return new OFOxmConnTrackingStateMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingTpDst.Builder buildConnTrackingTpDst() {
        return new OFOxmConnTrackingTpDstVer15.Builder();
    }
    public OFOxmConnTrackingTpDst connTrackingTpDst(TransportPort value) {
        return new OFOxmConnTrackingTpDstVer15(
                value
                    );
    }

    public OFOxmConnTrackingTpDstMasked.Builder buildConnTrackingTpDstMasked() {
        return new OFOxmConnTrackingTpDstMaskedVer15.Builder();
    }
    public OFOxmConnTrackingTpDstMasked connTrackingTpDstMasked(TransportPort value, TransportPort mask) {
        return new OFOxmConnTrackingTpDstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingTpSrc.Builder buildConnTrackingTpSrc() {
        return new OFOxmConnTrackingTpSrcVer15.Builder();
    }
    public OFOxmConnTrackingTpSrc connTrackingTpSrc(TransportPort value) {
        return new OFOxmConnTrackingTpSrcVer15(
                value
                    );
    }

    public OFOxmConnTrackingTpSrcMasked.Builder buildConnTrackingTpSrcMasked() {
        return new OFOxmConnTrackingTpSrcMaskedVer15.Builder();
    }
    public OFOxmConnTrackingTpSrcMasked connTrackingTpSrcMasked(TransportPort value, TransportPort mask) {
        return new OFOxmConnTrackingTpSrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmConnTrackingZone.Builder buildConnTrackingZone() {
        return new OFOxmConnTrackingZoneVer15.Builder();
    }
    public OFOxmConnTrackingZone connTrackingZone(U16 value) {
        return new OFOxmConnTrackingZoneVer15(
                value
                    );
    }

    public OFOxmConnTrackingZoneMasked.Builder buildConnTrackingZoneMasked() {
        return new OFOxmConnTrackingZoneMaskedVer15.Builder();
    }
    public OFOxmConnTrackingZoneMasked connTrackingZoneMasked(U16 value, U16 mask) {
        return new OFOxmConnTrackingZoneMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmEthDst.Builder buildEthDst() {
        return new OFOxmEthDstVer15.Builder();
    }
    public OFOxmEthDst ethDst(MacAddress value) {
        return new OFOxmEthDstVer15(
                value
                    );
    }

    public OFOxmEthDstMasked.Builder buildEthDstMasked() {
        return new OFOxmEthDstMaskedVer15.Builder();
    }
    public OFOxmEthDstMasked ethDstMasked(MacAddress value, MacAddress mask) {
        return new OFOxmEthDstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmEthSrc.Builder buildEthSrc() {
        return new OFOxmEthSrcVer15.Builder();
    }
    public OFOxmEthSrc ethSrc(MacAddress value) {
        return new OFOxmEthSrcVer15(
                value
                    );
    }

    public OFOxmEthSrcMasked.Builder buildEthSrcMasked() {
        return new OFOxmEthSrcMaskedVer15.Builder();
    }
    public OFOxmEthSrcMasked ethSrcMasked(MacAddress value, MacAddress mask) {
        return new OFOxmEthSrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmEthType.Builder buildEthType() {
        return new OFOxmEthTypeVer15.Builder();
    }
    public OFOxmEthType ethType(EthType value) {
        return new OFOxmEthTypeVer15(
                value
                    );
    }

    public OFOxmEthTypeMasked.Builder buildEthTypeMasked() {
        return new OFOxmEthTypeMaskedVer15.Builder();
    }
    public OFOxmEthTypeMasked ethTypeMasked(EthType value, EthType mask) {
        return new OFOxmEthTypeMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIcmpv4Code.Builder buildIcmpv4Code() {
        return new OFOxmIcmpv4CodeVer15.Builder();
    }
    public OFOxmIcmpv4Code icmpv4Code(ICMPv4Code value) {
        return new OFOxmIcmpv4CodeVer15(
                value
                    );
    }

    public OFOxmIcmpv4CodeMasked.Builder buildIcmpv4CodeMasked() {
        return new OFOxmIcmpv4CodeMaskedVer15.Builder();
    }
    public OFOxmIcmpv4CodeMasked icmpv4CodeMasked(ICMPv4Code value, ICMPv4Code mask) {
        return new OFOxmIcmpv4CodeMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIcmpv4Type.Builder buildIcmpv4Type() {
        return new OFOxmIcmpv4TypeVer15.Builder();
    }
    public OFOxmIcmpv4Type icmpv4Type(ICMPv4Type value) {
        return new OFOxmIcmpv4TypeVer15(
                value
                    );
    }

    public OFOxmIcmpv4TypeMasked.Builder buildIcmpv4TypeMasked() {
        return new OFOxmIcmpv4TypeMaskedVer15.Builder();
    }
    public OFOxmIcmpv4TypeMasked icmpv4TypeMasked(ICMPv4Type value, ICMPv4Type mask) {
        return new OFOxmIcmpv4TypeMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIcmpv6Code.Builder buildIcmpv6Code() {
        return new OFOxmIcmpv6CodeVer15.Builder();
    }
    public OFOxmIcmpv6Code icmpv6Code(U8 value) {
        return new OFOxmIcmpv6CodeVer15(
                value
                    );
    }

    public OFOxmIcmpv6CodeMasked.Builder buildIcmpv6CodeMasked() {
        return new OFOxmIcmpv6CodeMaskedVer15.Builder();
    }
    public OFOxmIcmpv6CodeMasked icmpv6CodeMasked(U8 value, U8 mask) {
        return new OFOxmIcmpv6CodeMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIcmpv6Type.Builder buildIcmpv6Type() {
        return new OFOxmIcmpv6TypeVer15.Builder();
    }
    public OFOxmIcmpv6Type icmpv6Type(U8 value) {
        return new OFOxmIcmpv6TypeVer15(
                value
                    );
    }

    public OFOxmIcmpv6TypeMasked.Builder buildIcmpv6TypeMasked() {
        return new OFOxmIcmpv6TypeMaskedVer15.Builder();
    }
    public OFOxmIcmpv6TypeMasked icmpv6TypeMasked(U8 value, U8 mask) {
        return new OFOxmIcmpv6TypeMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmInPhyPort.Builder buildInPhyPort() {
        return new OFOxmInPhyPortVer15.Builder();
    }
    public OFOxmInPhyPort inPhyPort(OFPort value) {
        return new OFOxmInPhyPortVer15(
                value
                    );
    }

    public OFOxmInPhyPortMasked.Builder buildInPhyPortMasked() {
        return new OFOxmInPhyPortMaskedVer15.Builder();
    }
    public OFOxmInPhyPortMasked inPhyPortMasked(OFPort value, OFPort mask) {
        return new OFOxmInPhyPortMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmInPort.Builder buildInPort() {
        return new OFOxmInPortVer15.Builder();
    }
    public OFOxmInPort inPort(OFPort value) {
        return new OFOxmInPortVer15(
                value
                    );
    }

    public OFOxmInPortMasked.Builder buildInPortMasked() {
        return new OFOxmInPortMaskedVer15.Builder();
    }
    public OFOxmInPortMasked inPortMasked(OFPort value, OFPort mask) {
        return new OFOxmInPortMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpDscp.Builder buildIpDscp() {
        return new OFOxmIpDscpVer15.Builder();
    }
    public OFOxmIpDscp ipDscp(IpDscp value) {
        return new OFOxmIpDscpVer15(
                value
                    );
    }

    public OFOxmIpDscpMasked.Builder buildIpDscpMasked() {
        return new OFOxmIpDscpMaskedVer15.Builder();
    }
    public OFOxmIpDscpMasked ipDscpMasked(IpDscp value, IpDscp mask) {
        return new OFOxmIpDscpMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpEcn.Builder buildIpEcn() {
        return new OFOxmIpEcnVer15.Builder();
    }
    public OFOxmIpEcn ipEcn(IpEcn value) {
        return new OFOxmIpEcnVer15(
                value
                    );
    }

    public OFOxmIpEcnMasked.Builder buildIpEcnMasked() {
        return new OFOxmIpEcnMaskedVer15.Builder();
    }
    public OFOxmIpEcnMasked ipEcnMasked(IpEcn value, IpEcn mask) {
        return new OFOxmIpEcnMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpProto.Builder buildIpProto() {
        return new OFOxmIpProtoVer15.Builder();
    }
    public OFOxmIpProto ipProto(IpProtocol value) {
        return new OFOxmIpProtoVer15(
                value
                    );
    }

    public OFOxmIpProtoMasked.Builder buildIpProtoMasked() {
        return new OFOxmIpProtoMaskedVer15.Builder();
    }
    public OFOxmIpProtoMasked ipProtoMasked(IpProtocol value, IpProtocol mask) {
        return new OFOxmIpProtoMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpv4Dst.Builder buildIpv4Dst() {
        return new OFOxmIpv4DstVer15.Builder();
    }
    public OFOxmIpv4Dst ipv4Dst(IPv4Address value) {
        return new OFOxmIpv4DstVer15(
                value
                    );
    }

    public OFOxmIpv4DstMasked.Builder buildIpv4DstMasked() {
        return new OFOxmIpv4DstMaskedVer15.Builder();
    }
    public OFOxmIpv4DstMasked ipv4DstMasked(IPv4Address value, IPv4Address mask) {
        return new OFOxmIpv4DstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpv4Src.Builder buildIpv4Src() {
        return new OFOxmIpv4SrcVer15.Builder();
    }
    public OFOxmIpv4Src ipv4Src(IPv4Address value) {
        return new OFOxmIpv4SrcVer15(
                value
                    );
    }

    public OFOxmIpv4SrcMasked.Builder buildIpv4SrcMasked() {
        return new OFOxmIpv4SrcMaskedVer15.Builder();
    }
    public OFOxmIpv4SrcMasked ipv4SrcMasked(IPv4Address value, IPv4Address mask) {
        return new OFOxmIpv4SrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpv6Dst.Builder buildIpv6Dst() {
        return new OFOxmIpv6DstVer15.Builder();
    }
    public OFOxmIpv6Dst ipv6Dst(IPv6Address value) {
        return new OFOxmIpv6DstVer15(
                value
                    );
    }

    public OFOxmIpv6DstMasked.Builder buildIpv6DstMasked() {
        return new OFOxmIpv6DstMaskedVer15.Builder();
    }
    public OFOxmIpv6DstMasked ipv6DstMasked(IPv6Address value, IPv6Address mask) {
        return new OFOxmIpv6DstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpv6Exthdr.Builder buildIpv6Exthdr() {
        return new OFOxmIpv6ExthdrVer15.Builder();
    }
    public OFOxmIpv6Exthdr ipv6Exthdr(U16 value) {
        return new OFOxmIpv6ExthdrVer15(
                value
                    );
    }

    public OFOxmIpv6ExthdrMasked.Builder buildIpv6ExthdrMasked() {
        return new OFOxmIpv6ExthdrMaskedVer15.Builder();
    }
    public OFOxmIpv6ExthdrMasked ipv6ExthdrMasked(U16 value, U16 mask) {
        return new OFOxmIpv6ExthdrMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpv6Flabel.Builder buildIpv6Flabel() {
        return new OFOxmIpv6FlabelVer15.Builder();
    }
    public OFOxmIpv6Flabel ipv6Flabel(IPv6FlowLabel value) {
        return new OFOxmIpv6FlabelVer15(
                value
                    );
    }

    public OFOxmIpv6FlabelMasked.Builder buildIpv6FlabelMasked() {
        return new OFOxmIpv6FlabelMaskedVer15.Builder();
    }
    public OFOxmIpv6FlabelMasked ipv6FlabelMasked(IPv6FlowLabel value, IPv6FlowLabel mask) {
        return new OFOxmIpv6FlabelMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpv6NdSll.Builder buildIpv6NdSll() {
        return new OFOxmIpv6NdSllVer15.Builder();
    }
    public OFOxmIpv6NdSll ipv6NdSll(MacAddress value) {
        return new OFOxmIpv6NdSllVer15(
                value
                    );
    }

    public OFOxmIpv6NdSllMasked.Builder buildIpv6NdSllMasked() {
        return new OFOxmIpv6NdSllMaskedVer15.Builder();
    }
    public OFOxmIpv6NdSllMasked ipv6NdSllMasked(MacAddress value, MacAddress mask) {
        return new OFOxmIpv6NdSllMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpv6NdTarget.Builder buildIpv6NdTarget() {
        return new OFOxmIpv6NdTargetVer15.Builder();
    }
    public OFOxmIpv6NdTarget ipv6NdTarget(IPv6Address value) {
        return new OFOxmIpv6NdTargetVer15(
                value
                    );
    }

    public OFOxmIpv6NdTargetMasked.Builder buildIpv6NdTargetMasked() {
        return new OFOxmIpv6NdTargetMaskedVer15.Builder();
    }
    public OFOxmIpv6NdTargetMasked ipv6NdTargetMasked(IPv6Address value, IPv6Address mask) {
        return new OFOxmIpv6NdTargetMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpv6NdTll.Builder buildIpv6NdTll() {
        return new OFOxmIpv6NdTllVer15.Builder();
    }
    public OFOxmIpv6NdTll ipv6NdTll(MacAddress value) {
        return new OFOxmIpv6NdTllVer15(
                value
                    );
    }

    public OFOxmIpv6NdTllMasked.Builder buildIpv6NdTllMasked() {
        return new OFOxmIpv6NdTllMaskedVer15.Builder();
    }
    public OFOxmIpv6NdTllMasked ipv6NdTllMasked(MacAddress value, MacAddress mask) {
        return new OFOxmIpv6NdTllMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmIpv6Src.Builder buildIpv6Src() {
        return new OFOxmIpv6SrcVer15.Builder();
    }
    public OFOxmIpv6Src ipv6Src(IPv6Address value) {
        return new OFOxmIpv6SrcVer15(
                value
                    );
    }

    public OFOxmIpv6SrcMasked.Builder buildIpv6SrcMasked() {
        return new OFOxmIpv6SrcMaskedVer15.Builder();
    }
    public OFOxmIpv6SrcMasked ipv6SrcMasked(IPv6Address value, IPv6Address mask) {
        return new OFOxmIpv6SrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmMetadata.Builder buildMetadata() {
        return new OFOxmMetadataVer15.Builder();
    }
    public OFOxmMetadata metadata(OFMetadata value) {
        return new OFOxmMetadataVer15(
                value
                    );
    }

    public OFOxmMetadataMasked.Builder buildMetadataMasked() {
        return new OFOxmMetadataMaskedVer15.Builder();
    }
    public OFOxmMetadataMasked metadataMasked(OFMetadata value, OFMetadata mask) {
        return new OFOxmMetadataMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmMplsBos.Builder buildMplsBos() {
        return new OFOxmMplsBosVer15.Builder();
    }
    public OFOxmMplsBos mplsBos(OFBooleanValue value) {
        return new OFOxmMplsBosVer15(
                value
                    );
    }

    public OFOxmMplsBosMasked.Builder buildMplsBosMasked() {
        return new OFOxmMplsBosMaskedVer15.Builder();
    }
    public OFOxmMplsBosMasked mplsBosMasked(OFBooleanValue value, OFBooleanValue mask) {
        return new OFOxmMplsBosMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmMplsLabel.Builder buildMplsLabel() {
        return new OFOxmMplsLabelVer15.Builder();
    }
    public OFOxmMplsLabel mplsLabel(U32 value) {
        return new OFOxmMplsLabelVer15(
                value
                    );
    }

    public OFOxmMplsLabelMasked.Builder buildMplsLabelMasked() {
        return new OFOxmMplsLabelMaskedVer15.Builder();
    }
    public OFOxmMplsLabelMasked mplsLabelMasked(U32 value, U32 mask) {
        return new OFOxmMplsLabelMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmMplsTc.Builder buildMplsTc() {
        return new OFOxmMplsTcVer15.Builder();
    }
    public OFOxmMplsTc mplsTc(U8 value) {
        return new OFOxmMplsTcVer15(
                value
                    );
    }

    public OFOxmMplsTcMasked.Builder buildMplsTcMasked() {
        return new OFOxmMplsTcMaskedVer15.Builder();
    }
    public OFOxmMplsTcMasked mplsTcMasked(U8 value, U8 mask) {
        return new OFOxmMplsTcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmOvsTcpFlags.Builder buildOvsTcpFlags() {
        return new OFOxmOvsTcpFlagsVer15.Builder();
    }
    public OFOxmOvsTcpFlags ovsTcpFlags(U16 value) {
        return new OFOxmOvsTcpFlagsVer15(
                value
                    );
    }

    public OFOxmOvsTcpFlagsMasked.Builder buildOvsTcpFlagsMasked() {
        return new OFOxmOvsTcpFlagsMaskedVer15.Builder();
    }
    public OFOxmOvsTcpFlagsMasked ovsTcpFlagsMasked(U16 value, U16 mask) {
        return new OFOxmOvsTcpFlagsMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmPacketType.Builder buildPacketType() {
        return new OFOxmPacketTypeVer15.Builder();
    }
    public OFOxmPacketType packetType(PacketType value) {
        return new OFOxmPacketTypeVer15(
                value
                    );
    }

    public OFOxmPacketTypeMasked.Builder buildPacketTypeMasked() {
        return new OFOxmPacketTypeMaskedVer15.Builder();
    }
    public OFOxmPacketTypeMasked packetTypeMasked(PacketType value, PacketType mask) {
        return new OFOxmPacketTypeMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmPbbUca.Builder buildPbbUca() {
        return new OFOxmPbbUcaVer15.Builder();
    }
    public OFOxmPbbUca pbbUca(OFBooleanValue value) {
        return new OFOxmPbbUcaVer15(
                value
                    );
    }

    public OFOxmPbbUcaMasked.Builder buildPbbUcaMasked() {
        return new OFOxmPbbUcaMaskedVer15.Builder();
    }
    public OFOxmPbbUcaMasked pbbUcaMasked(OFBooleanValue value, OFBooleanValue mask) {
        return new OFOxmPbbUcaMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmSctpDst.Builder buildSctpDst() {
        return new OFOxmSctpDstVer15.Builder();
    }
    public OFOxmSctpDst sctpDst(TransportPort value) {
        return new OFOxmSctpDstVer15(
                value
                    );
    }

    public OFOxmSctpDstMasked.Builder buildSctpDstMasked() {
        return new OFOxmSctpDstMaskedVer15.Builder();
    }
    public OFOxmSctpDstMasked sctpDstMasked(TransportPort value, TransportPort mask) {
        return new OFOxmSctpDstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmSctpSrc.Builder buildSctpSrc() {
        return new OFOxmSctpSrcVer15.Builder();
    }
    public OFOxmSctpSrc sctpSrc(TransportPort value) {
        return new OFOxmSctpSrcVer15(
                value
                    );
    }

    public OFOxmSctpSrcMasked.Builder buildSctpSrcMasked() {
        return new OFOxmSctpSrcMaskedVer15.Builder();
    }
    public OFOxmSctpSrcMasked sctpSrcMasked(TransportPort value, TransportPort mask) {
        return new OFOxmSctpSrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmTcpDst.Builder buildTcpDst() {
        return new OFOxmTcpDstVer15.Builder();
    }
    public OFOxmTcpDst tcpDst(TransportPort value) {
        return new OFOxmTcpDstVer15(
                value
                    );
    }

    public OFOxmTcpDstMasked.Builder buildTcpDstMasked() {
        return new OFOxmTcpDstMaskedVer15.Builder();
    }
    public OFOxmTcpDstMasked tcpDstMasked(TransportPort value, TransportPort mask) {
        return new OFOxmTcpDstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmTcpFlags.Builder buildTcpFlags() {
        return new OFOxmTcpFlagsVer15.Builder();
    }
    public OFOxmTcpFlags tcpFlags(U16 value) {
        return new OFOxmTcpFlagsVer15(
                value
                    );
    }

    public OFOxmTcpFlagsMasked.Builder buildTcpFlagsMasked() {
        return new OFOxmTcpFlagsMaskedVer15.Builder();
    }
    public OFOxmTcpFlagsMasked tcpFlagsMasked(U16 value, U16 mask) {
        return new OFOxmTcpFlagsMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmTcpSrc.Builder buildTcpSrc() {
        return new OFOxmTcpSrcVer15.Builder();
    }
    public OFOxmTcpSrc tcpSrc(TransportPort value) {
        return new OFOxmTcpSrcVer15(
                value
                    );
    }

    public OFOxmTcpSrcMasked.Builder buildTcpSrcMasked() {
        return new OFOxmTcpSrcMaskedVer15.Builder();
    }
    public OFOxmTcpSrcMasked tcpSrcMasked(TransportPort value, TransportPort mask) {
        return new OFOxmTcpSrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmTunnelId.Builder buildTunnelId() {
        return new OFOxmTunnelIdVer15.Builder();
    }
    public OFOxmTunnelId tunnelId(U64 value) {
        return new OFOxmTunnelIdVer15(
                value
                    );
    }

    public OFOxmTunnelIdMasked.Builder buildTunnelIdMasked() {
        return new OFOxmTunnelIdMaskedVer15.Builder();
    }
    public OFOxmTunnelIdMasked tunnelIdMasked(U64 value, U64 mask) {
        return new OFOxmTunnelIdMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmTunnelIpv4Dst.Builder buildTunnelIpv4Dst() {
        return new OFOxmTunnelIpv4DstVer15.Builder();
    }
    public OFOxmTunnelIpv4Dst tunnelIpv4Dst(IPv4Address value) {
        return new OFOxmTunnelIpv4DstVer15(
                value
                    );
    }

    public OFOxmTunnelIpv4DstMasked.Builder buildTunnelIpv4DstMasked() {
        return new OFOxmTunnelIpv4DstMaskedVer15.Builder();
    }
    public OFOxmTunnelIpv4DstMasked tunnelIpv4DstMasked(IPv4Address value, IPv4Address mask) {
        return new OFOxmTunnelIpv4DstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmTunnelIpv4Src.Builder buildTunnelIpv4Src() {
        return new OFOxmTunnelIpv4SrcVer15.Builder();
    }
    public OFOxmTunnelIpv4Src tunnelIpv4Src(IPv4Address value) {
        return new OFOxmTunnelIpv4SrcVer15(
                value
                    );
    }

    public OFOxmTunnelIpv4SrcMasked.Builder buildTunnelIpv4SrcMasked() {
        return new OFOxmTunnelIpv4SrcMaskedVer15.Builder();
    }
    public OFOxmTunnelIpv4SrcMasked tunnelIpv4SrcMasked(IPv4Address value, IPv4Address mask) {
        return new OFOxmTunnelIpv4SrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmUdpDst.Builder buildUdpDst() {
        return new OFOxmUdpDstVer15.Builder();
    }
    public OFOxmUdpDst udpDst(TransportPort value) {
        return new OFOxmUdpDstVer15(
                value
                    );
    }

    public OFOxmUdpDstMasked.Builder buildUdpDstMasked() {
        return new OFOxmUdpDstMaskedVer15.Builder();
    }
    public OFOxmUdpDstMasked udpDstMasked(TransportPort value, TransportPort mask) {
        return new OFOxmUdpDstMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmUdpSrc.Builder buildUdpSrc() {
        return new OFOxmUdpSrcVer15.Builder();
    }
    public OFOxmUdpSrc udpSrc(TransportPort value) {
        return new OFOxmUdpSrcVer15(
                value
                    );
    }

    public OFOxmUdpSrcMasked.Builder buildUdpSrcMasked() {
        return new OFOxmUdpSrcMaskedVer15.Builder();
    }
    public OFOxmUdpSrcMasked udpSrcMasked(TransportPort value, TransportPort mask) {
        return new OFOxmUdpSrcMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmVlanPcp.Builder buildVlanPcp() {
        return new OFOxmVlanPcpVer15.Builder();
    }
    public OFOxmVlanPcp vlanPcp(VlanPcp value) {
        return new OFOxmVlanPcpVer15(
                value
                    );
    }

    public OFOxmVlanPcpMasked.Builder buildVlanPcpMasked() {
        return new OFOxmVlanPcpMaskedVer15.Builder();
    }
    public OFOxmVlanPcpMasked vlanPcpMasked(VlanPcp value, VlanPcp mask) {
        return new OFOxmVlanPcpMaskedVer15(
                value,
                      mask
                    );
    }

    public OFOxmVlanVid.Builder buildVlanVid() {
        return new OFOxmVlanVidVer15.Builder();
    }
    public OFOxmVlanVid vlanVid(OFVlanVidMatch value) {
        return new OFOxmVlanVidVer15(
                value
                    );
    }

    public OFOxmVlanVidMasked.Builder buildVlanVidMasked() {
        return new OFOxmVlanVidMaskedVer15.Builder();
    }
    public OFOxmVlanVidMasked vlanVidMasked(OFVlanVidMatch value, OFVlanVidMatch mask) {
        return new OFOxmVlanVidMaskedVer15(
                value,
                      mask
                    );
    }

    public OFMessageReader<OFOxm<?>> getReader() {
        return OFOxmVer15.READER;
    }

    @SuppressWarnings("unchecked")
    public <F extends OFValueType<F>> OFOxm<F> fromValue(F value, MatchField<F> field) {
        switch (field.id) {
            case ACTSET_OUTPUT:
                return (OFOxm<F>)((Object)actsetOutput((OFPort)((Object)value)));
            case ARP_OP:
                return (OFOxm<F>)((Object)arpOp((ArpOpcode)((Object)value)));
            case ARP_SHA:
                return (OFOxm<F>)((Object)arpSha((MacAddress)((Object)value)));
            case ARP_SPA:
                return (OFOxm<F>)((Object)arpSpa((IPv4Address)((Object)value)));
            case ARP_THA:
                return (OFOxm<F>)((Object)arpTha((MacAddress)((Object)value)));
            case ARP_TPA:
                return (OFOxm<F>)((Object)arpTpa((IPv4Address)((Object)value)));
            case BSN_EGR_PORT_GROUP_ID:
                return (OFOxm<F>)((Object)bsnEgrPortGroupId((ClassId)((Object)value)));
            case BSN_GLOBAL_VRF_ALLOWED:
                return (OFOxm<F>)((Object)bsnGlobalVrfAllowed((OFBooleanValue)((Object)value)));
            case BSN_IFP_CLASS_ID:
                return (OFOxm<F>)((Object)bsnIfpClassId((ClassId)((Object)value)));
            case BSN_IN_PORTS_128:
                return (OFOxm<F>)((Object)bsnInPorts128((OFBitMask128)((Object)value)));
            case BSN_IN_PORTS_512:
                return (OFOxm<F>)((Object)bsnInPorts512((OFBitMask512)((Object)value)));
            case BSN_INGRESS_PORT_GROUP_ID:
                return (OFOxm<F>)((Object)bsnIngressPortGroupId((ClassId)((Object)value)));
            case BSN_INNER_ETH_DST:
                return (OFOxm<F>)((Object)bsnInnerEthDst((MacAddress)((Object)value)));
            case BSN_INNER_ETH_SRC:
                return (OFOxm<F>)((Object)bsnInnerEthSrc((MacAddress)((Object)value)));
            case BSN_INNER_VLAN_VID:
                return (OFOxm<F>)((Object)bsnInnerVlanVid((OFVlanVidMatch)((Object)value)));
            case BSN_IP_FRAGMENTATION:
                return (OFOxm<F>)((Object)bsnIpFragmentation((OFBooleanValue)((Object)value)));
            case BSN_L2_CACHE_HIT:
                return (OFOxm<F>)((Object)bsnL2CacheHit((OFBooleanValue)((Object)value)));
            case BSN_L3_DST_CLASS_ID:
                return (OFOxm<F>)((Object)bsnL3DstClassId((ClassId)((Object)value)));
            case BSN_L3_INTERFACE_CLASS_ID:
                return (OFOxm<F>)((Object)bsnL3InterfaceClassId((ClassId)((Object)value)));
            case BSN_L3_SRC_CLASS_ID:
                return (OFOxm<F>)((Object)bsnL3SrcClassId((ClassId)((Object)value)));
            case BSN_LAG_ID:
                return (OFOxm<F>)((Object)bsnLagId((LagId)((Object)value)));
            case BSN_TCP_FLAGS:
                return (OFOxm<F>)((Object)bsnTcpFlags((U16)((Object)value)));
            case BSN_UDF0:
                return (OFOxm<F>)((Object)bsnUdf0((UDF)((Object)value)));
            case BSN_UDF1:
                return (OFOxm<F>)((Object)bsnUdf1((UDF)((Object)value)));
            case BSN_UDF2:
                return (OFOxm<F>)((Object)bsnUdf2((UDF)((Object)value)));
            case BSN_UDF3:
                return (OFOxm<F>)((Object)bsnUdf3((UDF)((Object)value)));
            case BSN_UDF4:
                return (OFOxm<F>)((Object)bsnUdf4((UDF)((Object)value)));
            case BSN_UDF5:
                return (OFOxm<F>)((Object)bsnUdf5((UDF)((Object)value)));
            case BSN_UDF6:
                return (OFOxm<F>)((Object)bsnUdf6((UDF)((Object)value)));
            case BSN_UDF7:
                return (OFOxm<F>)((Object)bsnUdf7((UDF)((Object)value)));
            case BSN_VFI:
                return (OFOxm<F>)((Object)bsnVfi((VFI)((Object)value)));
            case BSN_VLAN_XLATE_PORT_GROUP_ID:
                return (OFOxm<F>)((Object)bsnVlanXlatePortGroupId((ClassId)((Object)value)));
            case BSN_VRF:
                return (OFOxm<F>)((Object)bsnVrf((VRF)((Object)value)));
            case BSN_VXLAN_NETWORK_ID:
                return (OFOxm<F>)((Object)bsnVxlanNetworkId((VxlanNI)((Object)value)));
            case CONN_TRACKING_IPV6_DST:
                return (OFOxm<F>)((Object)connTrackingIpv6Dst((IPv6Address)((Object)value)));
            case CONN_TRACKING_IPV6_SRC:
                return (OFOxm<F>)((Object)connTrackingIpv6Src((IPv6Address)((Object)value)));
            case CONN_TRACKING_LABEL:
                return (OFOxm<F>)((Object)connTrackingLabel((U128)((Object)value)));
            case CONN_TRACKING_MARK:
                return (OFOxm<F>)((Object)connTrackingMark((U32)((Object)value)));
            case CONN_TRACKING_NW_DST:
                return (OFOxm<F>)((Object)connTrackingNwDst((U32)((Object)value)));
            case CONN_TRACKING_NW_PROTO:
                return (OFOxm<F>)((Object)connTrackingNwProto((U8)((Object)value)));
            case CONN_TRACKING_NW_SRC:
                return (OFOxm<F>)((Object)connTrackingNwSrc((U32)((Object)value)));
            case CONN_TRACKING_STATE:
                return (OFOxm<F>)((Object)connTrackingState((U32)((Object)value)));
            case CONN_TRACKING_TP_DST:
                return (OFOxm<F>)((Object)connTrackingTpDst((TransportPort)((Object)value)));
            case CONN_TRACKING_TP_SRC:
                return (OFOxm<F>)((Object)connTrackingTpSrc((TransportPort)((Object)value)));
            case CONN_TRACKING_ZONE:
                return (OFOxm<F>)((Object)connTrackingZone((U16)((Object)value)));
            case ETH_DST:
                return (OFOxm<F>)((Object)ethDst((MacAddress)((Object)value)));
            case ETH_SRC:
                return (OFOxm<F>)((Object)ethSrc((MacAddress)((Object)value)));
            case ETH_TYPE:
                return (OFOxm<F>)((Object)ethType((EthType)((Object)value)));
            case ICMPV4_CODE:
                return (OFOxm<F>)((Object)icmpv4Code((ICMPv4Code)((Object)value)));
            case ICMPV4_TYPE:
                return (OFOxm<F>)((Object)icmpv4Type((ICMPv4Type)((Object)value)));
            case ICMPV6_CODE:
                return (OFOxm<F>)((Object)icmpv6Code((U8)((Object)value)));
            case ICMPV6_TYPE:
                return (OFOxm<F>)((Object)icmpv6Type((U8)((Object)value)));
            case IN_PHY_PORT:
                return (OFOxm<F>)((Object)inPhyPort((OFPort)((Object)value)));
            case IN_PORT:
                return (OFOxm<F>)((Object)inPort((OFPort)((Object)value)));
            case IP_DSCP:
                return (OFOxm<F>)((Object)ipDscp((IpDscp)((Object)value)));
            case IP_ECN:
                return (OFOxm<F>)((Object)ipEcn((IpEcn)((Object)value)));
            case IP_PROTO:
                return (OFOxm<F>)((Object)ipProto((IpProtocol)((Object)value)));
            case IPV4_DST:
                return (OFOxm<F>)((Object)ipv4Dst((IPv4Address)((Object)value)));
            case IPV4_SRC:
                return (OFOxm<F>)((Object)ipv4Src((IPv4Address)((Object)value)));
            case IPV6_DST:
                return (OFOxm<F>)((Object)ipv6Dst((IPv6Address)((Object)value)));
            case IPV6_EXTHDR:
                return (OFOxm<F>)((Object)ipv6Exthdr((U16)((Object)value)));
            case IPV6_FLABEL:
                return (OFOxm<F>)((Object)ipv6Flabel((IPv6FlowLabel)((Object)value)));
            case IPV6_ND_SLL:
                return (OFOxm<F>)((Object)ipv6NdSll((MacAddress)((Object)value)));
            case IPV6_ND_TARGET:
                return (OFOxm<F>)((Object)ipv6NdTarget((IPv6Address)((Object)value)));
            case IPV6_ND_TLL:
                return (OFOxm<F>)((Object)ipv6NdTll((MacAddress)((Object)value)));
            case IPV6_SRC:
                return (OFOxm<F>)((Object)ipv6Src((IPv6Address)((Object)value)));
            case METADATA:
                return (OFOxm<F>)((Object)metadata((OFMetadata)((Object)value)));
            case MPLS_BOS:
                return (OFOxm<F>)((Object)mplsBos((OFBooleanValue)((Object)value)));
            case MPLS_LABEL:
                return (OFOxm<F>)((Object)mplsLabel((U32)((Object)value)));
            case MPLS_TC:
                return (OFOxm<F>)((Object)mplsTc((U8)((Object)value)));
            case OVS_TCP_FLAGS:
                return (OFOxm<F>)((Object)ovsTcpFlags((U16)((Object)value)));
            case PACKET_TYPE:
                return (OFOxm<F>)((Object)packetType((PacketType)((Object)value)));
            case PBB_UCA:
                return (OFOxm<F>)((Object)pbbUca((OFBooleanValue)((Object)value)));
            case SCTP_DST:
                return (OFOxm<F>)((Object)sctpDst((TransportPort)((Object)value)));
            case SCTP_SRC:
                return (OFOxm<F>)((Object)sctpSrc((TransportPort)((Object)value)));
            case TCP_DST:
                return (OFOxm<F>)((Object)tcpDst((TransportPort)((Object)value)));
            case TCP_FLAGS:
                return (OFOxm<F>)((Object)tcpFlags((U16)((Object)value)));
            case TCP_SRC:
                return (OFOxm<F>)((Object)tcpSrc((TransportPort)((Object)value)));
            case TUNNEL_ID:
                return (OFOxm<F>)((Object)tunnelId((U64)((Object)value)));
            case TUNNEL_IPV4_DST:
                return (OFOxm<F>)((Object)tunnelIpv4Dst((IPv4Address)((Object)value)));
            case TUNNEL_IPV4_SRC:
                return (OFOxm<F>)((Object)tunnelIpv4Src((IPv4Address)((Object)value)));
            case UDP_DST:
                return (OFOxm<F>)((Object)udpDst((TransportPort)((Object)value)));
            case UDP_SRC:
                return (OFOxm<F>)((Object)udpSrc((TransportPort)((Object)value)));
            case VLAN_PCP:
                return (OFOxm<F>)((Object)vlanPcp((VlanPcp)((Object)value)));
            case VLAN_VID:
                return (OFOxm<F>)((Object)vlanVid((OFVlanVidMatch)((Object)value)));
            default:
                throw new IllegalArgumentException("No OXM known for match field " + field);
        }
    }

    @SuppressWarnings("unchecked")
    public <F extends OFValueType<F>> OFOxm<F> fromValueAndMask(F value, F mask, MatchField<F> field) {
        switch (field.id) {
            case ACTSET_OUTPUT:
                return (OFOxm<F>)((Object)actsetOutputMasked((OFPort)((Object)value), (OFPort)((Object)mask)));
            case ARP_OP:
                return (OFOxm<F>)((Object)arpOpMasked((ArpOpcode)((Object)value), (ArpOpcode)((Object)mask)));
            case ARP_SHA:
                return (OFOxm<F>)((Object)arpShaMasked((MacAddress)((Object)value), (MacAddress)((Object)mask)));
            case ARP_SPA:
                return (OFOxm<F>)((Object)arpSpaMasked((IPv4Address)((Object)value), (IPv4Address)((Object)mask)));
            case ARP_THA:
                return (OFOxm<F>)((Object)arpThaMasked((MacAddress)((Object)value), (MacAddress)((Object)mask)));
            case ARP_TPA:
                return (OFOxm<F>)((Object)arpTpaMasked((IPv4Address)((Object)value), (IPv4Address)((Object)mask)));
            case BSN_EGR_PORT_GROUP_ID:
                return (OFOxm<F>)((Object)bsnEgrPortGroupIdMasked((ClassId)((Object)value), (ClassId)((Object)mask)));
            case BSN_GLOBAL_VRF_ALLOWED:
                return (OFOxm<F>)((Object)bsnGlobalVrfAllowedMasked((OFBooleanValue)((Object)value), (OFBooleanValue)((Object)mask)));
            case BSN_IFP_CLASS_ID:
                return (OFOxm<F>)((Object)bsnIfpClassIdMasked((ClassId)((Object)value), (ClassId)((Object)mask)));
            case BSN_IN_PORTS_128:
                return (OFOxm<F>)((Object)bsnInPorts128Masked((OFBitMask128)((Object)value), (OFBitMask128)((Object)mask)));
            case BSN_IN_PORTS_512:
                return (OFOxm<F>)((Object)bsnInPorts512Masked((OFBitMask512)((Object)value), (OFBitMask512)((Object)mask)));
            case BSN_INGRESS_PORT_GROUP_ID:
                return (OFOxm<F>)((Object)bsnIngressPortGroupIdMasked((ClassId)((Object)value), (ClassId)((Object)mask)));
            case BSN_INNER_ETH_DST:
                return (OFOxm<F>)((Object)bsnInnerEthDstMasked((MacAddress)((Object)value), (MacAddress)((Object)mask)));
            case BSN_INNER_ETH_SRC:
                return (OFOxm<F>)((Object)bsnInnerEthSrcMasked((MacAddress)((Object)value), (MacAddress)((Object)mask)));
            case BSN_INNER_VLAN_VID:
                return (OFOxm<F>)((Object)bsnInnerVlanVidMasked((OFVlanVidMatch)((Object)value), (OFVlanVidMatch)((Object)mask)));
            case BSN_IP_FRAGMENTATION:
                return (OFOxm<F>)((Object)bsnIpFragmentationMasked((OFBooleanValue)((Object)value), (OFBooleanValue)((Object)mask)));
            case BSN_L2_CACHE_HIT:
                return (OFOxm<F>)((Object)bsnL2CacheHitMasked((OFBooleanValue)((Object)value), (OFBooleanValue)((Object)mask)));
            case BSN_L3_DST_CLASS_ID:
                return (OFOxm<F>)((Object)bsnL3DstClassIdMasked((ClassId)((Object)value), (ClassId)((Object)mask)));
            case BSN_L3_INTERFACE_CLASS_ID:
                return (OFOxm<F>)((Object)bsnL3InterfaceClassIdMasked((ClassId)((Object)value), (ClassId)((Object)mask)));
            case BSN_L3_SRC_CLASS_ID:
                return (OFOxm<F>)((Object)bsnL3SrcClassIdMasked((ClassId)((Object)value), (ClassId)((Object)mask)));
            case BSN_LAG_ID:
                return (OFOxm<F>)((Object)bsnLagIdMasked((LagId)((Object)value), (LagId)((Object)mask)));
            case BSN_TCP_FLAGS:
                return (OFOxm<F>)((Object)bsnTcpFlagsMasked((U16)((Object)value), (U16)((Object)mask)));
            case BSN_UDF0:
                return (OFOxm<F>)((Object)bsnUdf0Masked((UDF)((Object)value), (UDF)((Object)mask)));
            case BSN_UDF1:
                return (OFOxm<F>)((Object)bsnUdf1Masked((UDF)((Object)value), (UDF)((Object)mask)));
            case BSN_UDF2:
                return (OFOxm<F>)((Object)bsnUdf2Masked((UDF)((Object)value), (UDF)((Object)mask)));
            case BSN_UDF3:
                return (OFOxm<F>)((Object)bsnUdf3Masked((UDF)((Object)value), (UDF)((Object)mask)));
            case BSN_UDF4:
                return (OFOxm<F>)((Object)bsnUdf4Masked((UDF)((Object)value), (UDF)((Object)mask)));
            case BSN_UDF5:
                return (OFOxm<F>)((Object)bsnUdf5Masked((UDF)((Object)value), (UDF)((Object)mask)));
            case BSN_UDF6:
                return (OFOxm<F>)((Object)bsnUdf6Masked((UDF)((Object)value), (UDF)((Object)mask)));
            case BSN_UDF7:
                return (OFOxm<F>)((Object)bsnUdf7Masked((UDF)((Object)value), (UDF)((Object)mask)));
            case BSN_VFI:
                return (OFOxm<F>)((Object)bsnVfiMasked((VFI)((Object)value), (VFI)((Object)mask)));
            case BSN_VLAN_XLATE_PORT_GROUP_ID:
                return (OFOxm<F>)((Object)bsnVlanXlatePortGroupIdMasked((ClassId)((Object)value), (ClassId)((Object)mask)));
            case BSN_VRF:
                return (OFOxm<F>)((Object)bsnVrfMasked((VRF)((Object)value), (VRF)((Object)mask)));
            case BSN_VXLAN_NETWORK_ID:
                return (OFOxm<F>)((Object)bsnVxlanNetworkIdMasked((VxlanNI)((Object)value), (VxlanNI)((Object)mask)));
            case CONN_TRACKING_IPV6_DST:
                return (OFOxm<F>)((Object)connTrackingIpv6DstMasked((IPv6Address)((Object)value), (IPv6Address)((Object)mask)));
            case CONN_TRACKING_IPV6_SRC:
                return (OFOxm<F>)((Object)connTrackingIpv6SrcMasked((IPv6Address)((Object)value), (IPv6Address)((Object)mask)));
            case CONN_TRACKING_LABEL:
                return (OFOxm<F>)((Object)connTrackingLabelMasked((U128)((Object)value), (U128)((Object)mask)));
            case CONN_TRACKING_MARK:
                return (OFOxm<F>)((Object)connTrackingMarkMasked((U32)((Object)value), (U32)((Object)mask)));
            case CONN_TRACKING_NW_DST:
                return (OFOxm<F>)((Object)connTrackingNwDstMasked((U32)((Object)value), (U32)((Object)mask)));
            case CONN_TRACKING_NW_PROTO:
                return (OFOxm<F>)((Object)connTrackingNwProtoMasked((U8)((Object)value), (U8)((Object)mask)));
            case CONN_TRACKING_NW_SRC:
                return (OFOxm<F>)((Object)connTrackingNwSrcMasked((U32)((Object)value), (U32)((Object)mask)));
            case CONN_TRACKING_STATE:
                return (OFOxm<F>)((Object)connTrackingStateMasked((U32)((Object)value), (U32)((Object)mask)));
            case CONN_TRACKING_TP_DST:
                return (OFOxm<F>)((Object)connTrackingTpDstMasked((TransportPort)((Object)value), (TransportPort)((Object)mask)));
            case CONN_TRACKING_TP_SRC:
                return (OFOxm<F>)((Object)connTrackingTpSrcMasked((TransportPort)((Object)value), (TransportPort)((Object)mask)));
            case CONN_TRACKING_ZONE:
                return (OFOxm<F>)((Object)connTrackingZoneMasked((U16)((Object)value), (U16)((Object)mask)));
            case ETH_DST:
                return (OFOxm<F>)((Object)ethDstMasked((MacAddress)((Object)value), (MacAddress)((Object)mask)));
            case ETH_SRC:
                return (OFOxm<F>)((Object)ethSrcMasked((MacAddress)((Object)value), (MacAddress)((Object)mask)));
            case ETH_TYPE:
                return (OFOxm<F>)((Object)ethTypeMasked((EthType)((Object)value), (EthType)((Object)mask)));
            case ICMPV4_CODE:
                return (OFOxm<F>)((Object)icmpv4CodeMasked((ICMPv4Code)((Object)value), (ICMPv4Code)((Object)mask)));
            case ICMPV4_TYPE:
                return (OFOxm<F>)((Object)icmpv4TypeMasked((ICMPv4Type)((Object)value), (ICMPv4Type)((Object)mask)));
            case ICMPV6_CODE:
                return (OFOxm<F>)((Object)icmpv6CodeMasked((U8)((Object)value), (U8)((Object)mask)));
            case ICMPV6_TYPE:
                return (OFOxm<F>)((Object)icmpv6TypeMasked((U8)((Object)value), (U8)((Object)mask)));
            case IN_PHY_PORT:
                return (OFOxm<F>)((Object)inPhyPortMasked((OFPort)((Object)value), (OFPort)((Object)mask)));
            case IN_PORT:
                return (OFOxm<F>)((Object)inPortMasked((OFPort)((Object)value), (OFPort)((Object)mask)));
            case IP_DSCP:
                return (OFOxm<F>)((Object)ipDscpMasked((IpDscp)((Object)value), (IpDscp)((Object)mask)));
            case IP_ECN:
                return (OFOxm<F>)((Object)ipEcnMasked((IpEcn)((Object)value), (IpEcn)((Object)mask)));
            case IP_PROTO:
                return (OFOxm<F>)((Object)ipProtoMasked((IpProtocol)((Object)value), (IpProtocol)((Object)mask)));
            case IPV4_DST:
                return (OFOxm<F>)((Object)ipv4DstMasked((IPv4Address)((Object)value), (IPv4Address)((Object)mask)));
            case IPV4_SRC:
                return (OFOxm<F>)((Object)ipv4SrcMasked((IPv4Address)((Object)value), (IPv4Address)((Object)mask)));
            case IPV6_DST:
                return (OFOxm<F>)((Object)ipv6DstMasked((IPv6Address)((Object)value), (IPv6Address)((Object)mask)));
            case IPV6_EXTHDR:
                return (OFOxm<F>)((Object)ipv6ExthdrMasked((U16)((Object)value), (U16)((Object)mask)));
            case IPV6_FLABEL:
                return (OFOxm<F>)((Object)ipv6FlabelMasked((IPv6FlowLabel)((Object)value), (IPv6FlowLabel)((Object)mask)));
            case IPV6_ND_SLL:
                return (OFOxm<F>)((Object)ipv6NdSllMasked((MacAddress)((Object)value), (MacAddress)((Object)mask)));
            case IPV6_ND_TARGET:
                return (OFOxm<F>)((Object)ipv6NdTargetMasked((IPv6Address)((Object)value), (IPv6Address)((Object)mask)));
            case IPV6_ND_TLL:
                return (OFOxm<F>)((Object)ipv6NdTllMasked((MacAddress)((Object)value), (MacAddress)((Object)mask)));
            case IPV6_SRC:
                return (OFOxm<F>)((Object)ipv6SrcMasked((IPv6Address)((Object)value), (IPv6Address)((Object)mask)));
            case METADATA:
                return (OFOxm<F>)((Object)metadataMasked((OFMetadata)((Object)value), (OFMetadata)((Object)mask)));
            case MPLS_BOS:
                return (OFOxm<F>)((Object)mplsBosMasked((OFBooleanValue)((Object)value), (OFBooleanValue)((Object)mask)));
            case MPLS_LABEL:
                return (OFOxm<F>)((Object)mplsLabelMasked((U32)((Object)value), (U32)((Object)mask)));
            case MPLS_TC:
                return (OFOxm<F>)((Object)mplsTcMasked((U8)((Object)value), (U8)((Object)mask)));
            case OVS_TCP_FLAGS:
                return (OFOxm<F>)((Object)ovsTcpFlagsMasked((U16)((Object)value), (U16)((Object)mask)));
            case PACKET_TYPE:
                return (OFOxm<F>)((Object)packetTypeMasked((PacketType)((Object)value), (PacketType)((Object)mask)));
            case PBB_UCA:
                return (OFOxm<F>)((Object)pbbUcaMasked((OFBooleanValue)((Object)value), (OFBooleanValue)((Object)mask)));
            case SCTP_DST:
                return (OFOxm<F>)((Object)sctpDstMasked((TransportPort)((Object)value), (TransportPort)((Object)mask)));
            case SCTP_SRC:
                return (OFOxm<F>)((Object)sctpSrcMasked((TransportPort)((Object)value), (TransportPort)((Object)mask)));
            case TCP_DST:
                return (OFOxm<F>)((Object)tcpDstMasked((TransportPort)((Object)value), (TransportPort)((Object)mask)));
            case TCP_FLAGS:
                return (OFOxm<F>)((Object)tcpFlagsMasked((U16)((Object)value), (U16)((Object)mask)));
            case TCP_SRC:
                return (OFOxm<F>)((Object)tcpSrcMasked((TransportPort)((Object)value), (TransportPort)((Object)mask)));
            case TUNNEL_ID:
                return (OFOxm<F>)((Object)tunnelIdMasked((U64)((Object)value), (U64)((Object)mask)));
            case TUNNEL_IPV4_DST:
                return (OFOxm<F>)((Object)tunnelIpv4DstMasked((IPv4Address)((Object)value), (IPv4Address)((Object)mask)));
            case TUNNEL_IPV4_SRC:
                return (OFOxm<F>)((Object)tunnelIpv4SrcMasked((IPv4Address)((Object)value), (IPv4Address)((Object)mask)));
            case UDP_DST:
                return (OFOxm<F>)((Object)udpDstMasked((TransportPort)((Object)value), (TransportPort)((Object)mask)));
            case UDP_SRC:
                return (OFOxm<F>)((Object)udpSrcMasked((TransportPort)((Object)value), (TransportPort)((Object)mask)));
            case VLAN_PCP:
                return (OFOxm<F>)((Object)vlanPcpMasked((VlanPcp)((Object)value), (VlanPcp)((Object)mask)));
            case VLAN_VID:
                return (OFOxm<F>)((Object)vlanVidMasked((OFVlanVidMatch)((Object)value), (OFVlanVidMatch)((Object)mask)));
            default:
                throw new IllegalArgumentException("No OXM known for match field " + field);
        }
    }

    @SuppressWarnings("unchecked")
    public <F extends OFValueType<F>> OFOxm<F> fromMasked(Masked<F> masked, MatchField<F> field) {
        switch (field.id) {
            case ACTSET_OUTPUT:
                return (OFOxm<F>)((Object)actsetOutputMasked((OFPort)((Object)(masked.getValue())), (OFPort)((Object)(masked.getMask()))));
            case ARP_OP:
                return (OFOxm<F>)((Object)arpOpMasked((ArpOpcode)((Object)(masked.getValue())), (ArpOpcode)((Object)(masked.getMask()))));
            case ARP_SHA:
                return (OFOxm<F>)((Object)arpShaMasked((MacAddress)((Object)(masked.getValue())), (MacAddress)((Object)(masked.getMask()))));
            case ARP_SPA:
                return (OFOxm<F>)((Object)arpSpaMasked((IPv4Address)((Object)(masked.getValue())), (IPv4Address)((Object)(masked.getMask()))));
            case ARP_THA:
                return (OFOxm<F>)((Object)arpThaMasked((MacAddress)((Object)(masked.getValue())), (MacAddress)((Object)(masked.getMask()))));
            case ARP_TPA:
                return (OFOxm<F>)((Object)arpTpaMasked((IPv4Address)((Object)(masked.getValue())), (IPv4Address)((Object)(masked.getMask()))));
            case BSN_EGR_PORT_GROUP_ID:
                return (OFOxm<F>)((Object)bsnEgrPortGroupIdMasked((ClassId)((Object)(masked.getValue())), (ClassId)((Object)(masked.getMask()))));
            case BSN_GLOBAL_VRF_ALLOWED:
                return (OFOxm<F>)((Object)bsnGlobalVrfAllowedMasked((OFBooleanValue)((Object)(masked.getValue())), (OFBooleanValue)((Object)(masked.getMask()))));
            case BSN_IFP_CLASS_ID:
                return (OFOxm<F>)((Object)bsnIfpClassIdMasked((ClassId)((Object)(masked.getValue())), (ClassId)((Object)(masked.getMask()))));
            case BSN_IN_PORTS_128:
                return (OFOxm<F>)((Object)bsnInPorts128Masked((OFBitMask128)((Object)(masked.getValue())), (OFBitMask128)((Object)(masked.getMask()))));
            case BSN_IN_PORTS_512:
                return (OFOxm<F>)((Object)bsnInPorts512Masked((OFBitMask512)((Object)(masked.getValue())), (OFBitMask512)((Object)(masked.getMask()))));
            case BSN_INGRESS_PORT_GROUP_ID:
                return (OFOxm<F>)((Object)bsnIngressPortGroupIdMasked((ClassId)((Object)(masked.getValue())), (ClassId)((Object)(masked.getMask()))));
            case BSN_INNER_ETH_DST:
                return (OFOxm<F>)((Object)bsnInnerEthDstMasked((MacAddress)((Object)(masked.getValue())), (MacAddress)((Object)(masked.getMask()))));
            case BSN_INNER_ETH_SRC:
                return (OFOxm<F>)((Object)bsnInnerEthSrcMasked((MacAddress)((Object)(masked.getValue())), (MacAddress)((Object)(masked.getMask()))));
            case BSN_INNER_VLAN_VID:
                return (OFOxm<F>)((Object)bsnInnerVlanVidMasked((OFVlanVidMatch)((Object)(masked.getValue())), (OFVlanVidMatch)((Object)(masked.getMask()))));
            case BSN_IP_FRAGMENTATION:
                return (OFOxm<F>)((Object)bsnIpFragmentationMasked((OFBooleanValue)((Object)(masked.getValue())), (OFBooleanValue)((Object)(masked.getMask()))));
            case BSN_L2_CACHE_HIT:
                return (OFOxm<F>)((Object)bsnL2CacheHitMasked((OFBooleanValue)((Object)(masked.getValue())), (OFBooleanValue)((Object)(masked.getMask()))));
            case BSN_L3_DST_CLASS_ID:
                return (OFOxm<F>)((Object)bsnL3DstClassIdMasked((ClassId)((Object)(masked.getValue())), (ClassId)((Object)(masked.getMask()))));
            case BSN_L3_INTERFACE_CLASS_ID:
                return (OFOxm<F>)((Object)bsnL3InterfaceClassIdMasked((ClassId)((Object)(masked.getValue())), (ClassId)((Object)(masked.getMask()))));
            case BSN_L3_SRC_CLASS_ID:
                return (OFOxm<F>)((Object)bsnL3SrcClassIdMasked((ClassId)((Object)(masked.getValue())), (ClassId)((Object)(masked.getMask()))));
            case BSN_LAG_ID:
                return (OFOxm<F>)((Object)bsnLagIdMasked((LagId)((Object)(masked.getValue())), (LagId)((Object)(masked.getMask()))));
            case BSN_TCP_FLAGS:
                return (OFOxm<F>)((Object)bsnTcpFlagsMasked((U16)((Object)(masked.getValue())), (U16)((Object)(masked.getMask()))));
            case BSN_UDF0:
                return (OFOxm<F>)((Object)bsnUdf0Masked((UDF)((Object)(masked.getValue())), (UDF)((Object)(masked.getMask()))));
            case BSN_UDF1:
                return (OFOxm<F>)((Object)bsnUdf1Masked((UDF)((Object)(masked.getValue())), (UDF)((Object)(masked.getMask()))));
            case BSN_UDF2:
                return (OFOxm<F>)((Object)bsnUdf2Masked((UDF)((Object)(masked.getValue())), (UDF)((Object)(masked.getMask()))));
            case BSN_UDF3:
                return (OFOxm<F>)((Object)bsnUdf3Masked((UDF)((Object)(masked.getValue())), (UDF)((Object)(masked.getMask()))));
            case BSN_UDF4:
                return (OFOxm<F>)((Object)bsnUdf4Masked((UDF)((Object)(masked.getValue())), (UDF)((Object)(masked.getMask()))));
            case BSN_UDF5:
                return (OFOxm<F>)((Object)bsnUdf5Masked((UDF)((Object)(masked.getValue())), (UDF)((Object)(masked.getMask()))));
            case BSN_UDF6:
                return (OFOxm<F>)((Object)bsnUdf6Masked((UDF)((Object)(masked.getValue())), (UDF)((Object)(masked.getMask()))));
            case BSN_UDF7:
                return (OFOxm<F>)((Object)bsnUdf7Masked((UDF)((Object)(masked.getValue())), (UDF)((Object)(masked.getMask()))));
            case BSN_VFI:
                return (OFOxm<F>)((Object)bsnVfiMasked((VFI)((Object)(masked.getValue())), (VFI)((Object)(masked.getMask()))));
            case BSN_VLAN_XLATE_PORT_GROUP_ID:
                return (OFOxm<F>)((Object)bsnVlanXlatePortGroupIdMasked((ClassId)((Object)(masked.getValue())), (ClassId)((Object)(masked.getMask()))));
            case BSN_VRF:
                return (OFOxm<F>)((Object)bsnVrfMasked((VRF)((Object)(masked.getValue())), (VRF)((Object)(masked.getMask()))));
            case BSN_VXLAN_NETWORK_ID:
                return (OFOxm<F>)((Object)bsnVxlanNetworkIdMasked((VxlanNI)((Object)(masked.getValue())), (VxlanNI)((Object)(masked.getMask()))));
            case CONN_TRACKING_IPV6_DST:
                return (OFOxm<F>)((Object)connTrackingIpv6DstMasked((IPv6Address)((Object)(masked.getValue())), (IPv6Address)((Object)(masked.getMask()))));
            case CONN_TRACKING_IPV6_SRC:
                return (OFOxm<F>)((Object)connTrackingIpv6SrcMasked((IPv6Address)((Object)(masked.getValue())), (IPv6Address)((Object)(masked.getMask()))));
            case CONN_TRACKING_LABEL:
                return (OFOxm<F>)((Object)connTrackingLabelMasked((U128)((Object)(masked.getValue())), (U128)((Object)(masked.getMask()))));
            case CONN_TRACKING_MARK:
                return (OFOxm<F>)((Object)connTrackingMarkMasked((U32)((Object)(masked.getValue())), (U32)((Object)(masked.getMask()))));
            case CONN_TRACKING_NW_DST:
                return (OFOxm<F>)((Object)connTrackingNwDstMasked((U32)((Object)(masked.getValue())), (U32)((Object)(masked.getMask()))));
            case CONN_TRACKING_NW_PROTO:
                return (OFOxm<F>)((Object)connTrackingNwProtoMasked((U8)((Object)(masked.getValue())), (U8)((Object)(masked.getMask()))));
            case CONN_TRACKING_NW_SRC:
                return (OFOxm<F>)((Object)connTrackingNwSrcMasked((U32)((Object)(masked.getValue())), (U32)((Object)(masked.getMask()))));
            case CONN_TRACKING_STATE:
                return (OFOxm<F>)((Object)connTrackingStateMasked((U32)((Object)(masked.getValue())), (U32)((Object)(masked.getMask()))));
            case CONN_TRACKING_TP_DST:
                return (OFOxm<F>)((Object)connTrackingTpDstMasked((TransportPort)((Object)(masked.getValue())), (TransportPort)((Object)(masked.getMask()))));
            case CONN_TRACKING_TP_SRC:
                return (OFOxm<F>)((Object)connTrackingTpSrcMasked((TransportPort)((Object)(masked.getValue())), (TransportPort)((Object)(masked.getMask()))));
            case CONN_TRACKING_ZONE:
                return (OFOxm<F>)((Object)connTrackingZoneMasked((U16)((Object)(masked.getValue())), (U16)((Object)(masked.getMask()))));
            case ETH_DST:
                return (OFOxm<F>)((Object)ethDstMasked((MacAddress)((Object)(masked.getValue())), (MacAddress)((Object)(masked.getMask()))));
            case ETH_SRC:
                return (OFOxm<F>)((Object)ethSrcMasked((MacAddress)((Object)(masked.getValue())), (MacAddress)((Object)(masked.getMask()))));
            case ETH_TYPE:
                return (OFOxm<F>)((Object)ethTypeMasked((EthType)((Object)(masked.getValue())), (EthType)((Object)(masked.getMask()))));
            case ICMPV4_CODE:
                return (OFOxm<F>)((Object)icmpv4CodeMasked((ICMPv4Code)((Object)(masked.getValue())), (ICMPv4Code)((Object)(masked.getMask()))));
            case ICMPV4_TYPE:
                return (OFOxm<F>)((Object)icmpv4TypeMasked((ICMPv4Type)((Object)(masked.getValue())), (ICMPv4Type)((Object)(masked.getMask()))));
            case ICMPV6_CODE:
                return (OFOxm<F>)((Object)icmpv6CodeMasked((U8)((Object)(masked.getValue())), (U8)((Object)(masked.getMask()))));
            case ICMPV6_TYPE:
                return (OFOxm<F>)((Object)icmpv6TypeMasked((U8)((Object)(masked.getValue())), (U8)((Object)(masked.getMask()))));
            case IN_PHY_PORT:
                return (OFOxm<F>)((Object)inPhyPortMasked((OFPort)((Object)(masked.getValue())), (OFPort)((Object)(masked.getMask()))));
            case IN_PORT:
                return (OFOxm<F>)((Object)inPortMasked((OFPort)((Object)(masked.getValue())), (OFPort)((Object)(masked.getMask()))));
            case IP_DSCP:
                return (OFOxm<F>)((Object)ipDscpMasked((IpDscp)((Object)(masked.getValue())), (IpDscp)((Object)(masked.getMask()))));
            case IP_ECN:
                return (OFOxm<F>)((Object)ipEcnMasked((IpEcn)((Object)(masked.getValue())), (IpEcn)((Object)(masked.getMask()))));
            case IP_PROTO:
                return (OFOxm<F>)((Object)ipProtoMasked((IpProtocol)((Object)(masked.getValue())), (IpProtocol)((Object)(masked.getMask()))));
            case IPV4_DST:
                return (OFOxm<F>)((Object)ipv4DstMasked((IPv4Address)((Object)(masked.getValue())), (IPv4Address)((Object)(masked.getMask()))));
            case IPV4_SRC:
                return (OFOxm<F>)((Object)ipv4SrcMasked((IPv4Address)((Object)(masked.getValue())), (IPv4Address)((Object)(masked.getMask()))));
            case IPV6_DST:
                return (OFOxm<F>)((Object)ipv6DstMasked((IPv6Address)((Object)(masked.getValue())), (IPv6Address)((Object)(masked.getMask()))));
            case IPV6_EXTHDR:
                return (OFOxm<F>)((Object)ipv6ExthdrMasked((U16)((Object)(masked.getValue())), (U16)((Object)(masked.getMask()))));
            case IPV6_FLABEL:
                return (OFOxm<F>)((Object)ipv6FlabelMasked((IPv6FlowLabel)((Object)(masked.getValue())), (IPv6FlowLabel)((Object)(masked.getMask()))));
            case IPV6_ND_SLL:
                return (OFOxm<F>)((Object)ipv6NdSllMasked((MacAddress)((Object)(masked.getValue())), (MacAddress)((Object)(masked.getMask()))));
            case IPV6_ND_TARGET:
                return (OFOxm<F>)((Object)ipv6NdTargetMasked((IPv6Address)((Object)(masked.getValue())), (IPv6Address)((Object)(masked.getMask()))));
            case IPV6_ND_TLL:
                return (OFOxm<F>)((Object)ipv6NdTllMasked((MacAddress)((Object)(masked.getValue())), (MacAddress)((Object)(masked.getMask()))));
            case IPV6_SRC:
                return (OFOxm<F>)((Object)ipv6SrcMasked((IPv6Address)((Object)(masked.getValue())), (IPv6Address)((Object)(masked.getMask()))));
            case METADATA:
                return (OFOxm<F>)((Object)metadataMasked((OFMetadata)((Object)(masked.getValue())), (OFMetadata)((Object)(masked.getMask()))));
            case MPLS_BOS:
                return (OFOxm<F>)((Object)mplsBosMasked((OFBooleanValue)((Object)(masked.getValue())), (OFBooleanValue)((Object)(masked.getMask()))));
            case MPLS_LABEL:
                return (OFOxm<F>)((Object)mplsLabelMasked((U32)((Object)(masked.getValue())), (U32)((Object)(masked.getMask()))));
            case MPLS_TC:
                return (OFOxm<F>)((Object)mplsTcMasked((U8)((Object)(masked.getValue())), (U8)((Object)(masked.getMask()))));
            case OVS_TCP_FLAGS:
                return (OFOxm<F>)((Object)ovsTcpFlagsMasked((U16)((Object)(masked.getValue())), (U16)((Object)(masked.getMask()))));
            case PACKET_TYPE:
                return (OFOxm<F>)((Object)packetTypeMasked((PacketType)((Object)(masked.getValue())), (PacketType)((Object)(masked.getMask()))));
            case PBB_UCA:
                return (OFOxm<F>)((Object)pbbUcaMasked((OFBooleanValue)((Object)(masked.getValue())), (OFBooleanValue)((Object)(masked.getMask()))));
            case SCTP_DST:
                return (OFOxm<F>)((Object)sctpDstMasked((TransportPort)((Object)(masked.getValue())), (TransportPort)((Object)(masked.getMask()))));
            case SCTP_SRC:
                return (OFOxm<F>)((Object)sctpSrcMasked((TransportPort)((Object)(masked.getValue())), (TransportPort)((Object)(masked.getMask()))));
            case TCP_DST:
                return (OFOxm<F>)((Object)tcpDstMasked((TransportPort)((Object)(masked.getValue())), (TransportPort)((Object)(masked.getMask()))));
            case TCP_FLAGS:
                return (OFOxm<F>)((Object)tcpFlagsMasked((U16)((Object)(masked.getValue())), (U16)((Object)(masked.getMask()))));
            case TCP_SRC:
                return (OFOxm<F>)((Object)tcpSrcMasked((TransportPort)((Object)(masked.getValue())), (TransportPort)((Object)(masked.getMask()))));
            case TUNNEL_ID:
                return (OFOxm<F>)((Object)tunnelIdMasked((U64)((Object)(masked.getValue())), (U64)((Object)(masked.getMask()))));
            case TUNNEL_IPV4_DST:
                return (OFOxm<F>)((Object)tunnelIpv4DstMasked((IPv4Address)((Object)(masked.getValue())), (IPv4Address)((Object)(masked.getMask()))));
            case TUNNEL_IPV4_SRC:
                return (OFOxm<F>)((Object)tunnelIpv4SrcMasked((IPv4Address)((Object)(masked.getValue())), (IPv4Address)((Object)(masked.getMask()))));
            case UDP_DST:
                return (OFOxm<F>)((Object)udpDstMasked((TransportPort)((Object)(masked.getValue())), (TransportPort)((Object)(masked.getMask()))));
            case UDP_SRC:
                return (OFOxm<F>)((Object)udpSrcMasked((TransportPort)((Object)(masked.getValue())), (TransportPort)((Object)(masked.getMask()))));
            case VLAN_PCP:
                return (OFOxm<F>)((Object)vlanPcpMasked((VlanPcp)((Object)(masked.getValue())), (VlanPcp)((Object)(masked.getMask()))));
            case VLAN_VID:
                return (OFOxm<F>)((Object)vlanVidMasked((OFVlanVidMatch)((Object)(masked.getValue())), (OFVlanVidMatch)((Object)(masked.getMask()))));
            default:
                return null;
        }
    }

    public OFVersion getVersion() {
            return OFVersion.OF_15;
    }
}
